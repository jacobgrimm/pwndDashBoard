{
  "/home/jacob/Documents/SpyCloud Code Challenge/pwnd-backend": {
    "versionSfCore": null,
    "versionFramework": "4.4.13",
    "isWithinCompose": false,
    "isCompose": false,
    "composeOrgName": null,
    "composeResolverProviders": {
      "default-aws-credential-resolver": "<REDACTED>",
      "param": {
        "instance": {
          "credentials": "<REDACTED>",
          "serviceConfigFile": {
            "service": "Pwnd-Backend",
            "provider": {
              "name": "aws",
              "runtime": "python3.10",
              "region": "us-east-2",
              "stage": "prod",
              "environment": {
                "CREDS_TABLE": {
                  "Ref": "CredentialsTable"
                }
              },
              "iam": {
                "role": "lambdaProcessRole"
              },
              "versionFunctions": true,
              "compiledCloudFormationTemplate": {
                "AWSTemplateFormatVersion": "2010-09-09",
                "Description": "The AWS CloudFormation template for this Serverless application",
                "Resources": {
                  "IngestUnderscoredataLogGroup": {
                    "Type": "AWS::Logs::LogGroup",
                    "Properties": {
                      "LogGroupName": "/aws/lambda/Pwnd-Backend-prod-ingest_data"
                    }
                  },
                  "ProxyLogGroup": {
                    "Type": "AWS::Logs::LogGroup",
                    "Properties": {
                      "LogGroupName": "/aws/lambda/Pwnd-Backend-prod-proxy"
                    }
                  },
                  "IngestUnderscoredataLambdaFunction": {
                    "Type": "AWS::Lambda::Function",
                    "Properties": {
                      "Code": {
                        "S3Bucket": "serverless-framework-deployments-us-east-2-892f4b5c-f3a5",
                        "S3Key": "serverless/Pwnd-Backend/prod/1733213700634-2024-12-03T08:15:00.634Z/Pwnd-Backend.zip"
                      },
                      "Handler": "lambdas/ingest_data.lambda_handler",
                      "Runtime": "python3.10",
                      "FunctionName": "Pwnd-Backend-prod-ingest_data",
                      "MemorySize": 1024,
                      "Timeout": 500,
                      "Environment": {
                        "Variables": {
                          "CREDS_TABLE": {
                            "Ref": "CredentialsTable"
                          }
                        }
                      },
                      "Role": {
                        "Fn::GetAtt": [
                          "lambdaProcessRole",
                          "Arn"
                        ]
                      }
                    },
                    "DependsOn": [
                      "IngestUnderscoredataLogGroup",
                      "lambdaProcessRole"
                    ]
                  },
                  "ProxyLambdaFunction": {
                    "Type": "AWS::Lambda::Function",
                    "Properties": {
                      "Code": {
                        "S3Bucket": "serverless-framework-deployments-us-east-2-892f4b5c-f3a5",
                        "S3Key": "serverless/Pwnd-Backend/prod/1733213700634-2024-12-03T08:15:00.634Z/Pwnd-Backend.zip"
                      },
                      "Handler": "handler.dummy",
                      "Runtime": "python3.10",
                      "FunctionName": "Pwnd-Backend-prod-proxy",
                      "MemorySize": 1024,
                      "Timeout": 6,
                      "Environment": {
                        "Variables": {
                          "CREDS_TABLE": {
                            "Ref": "CredentialsTable"
                          }
                        }
                      },
                      "Role": {
                        "Fn::GetAtt": [
                          "lambdaProcessRole",
                          "Arn"
                        ]
                      }
                    },
                    "DependsOn": [
                      "ProxyLogGroup",
                      "lambdaProcessRole"
                    ]
                  },
                  "IngestUnderscoredataLambdaVersionA0BnlAE0NIFtKZXwZysr13aFMg2SElMXZOBhk7Rvao": {
                    "Type": "AWS::Lambda::Version",
                    "DeletionPolicy": "Retain",
                    "Properties": {
                      "FunctionName": {
                        "Ref": "IngestUnderscoredataLambdaFunction"
                      },
                      "CodeSha256": "9c/g9URdJ2F/9SmwPUN0D5XTXmJNfIsHmAxEx49hVUg="
                    }
                  },
                  "ProxyLambdaVersionkaxR7pj0IuQcHjZfYXbTyltQDLZbyjdbZbC6PBMH8ic": {
                    "Type": "AWS::Lambda::Version",
                    "DeletionPolicy": "Retain",
                    "Properties": {
                      "FunctionName": {
                        "Ref": "ProxyLambdaFunction"
                      },
                      "CodeSha256": "9c/g9URdJ2F/9SmwPUN0D5XTXmJNfIsHmAxEx49hVUg="
                    }
                  },
                  "IngestUnderscoredataCustomS31": {
                    "Type": "Custom::S3",
                    "Version": "1.0",
                    "DependsOn": [
                      "IngestUnderscoredataLambdaFunction",
                      "CustomDashresourceDashexistingDashs3LambdaFunction"
                    ],
                    "Properties": {
                      "ServiceToken": "<REDACTED>",
                      "FunctionName": "Pwnd-Backend-prod-ingest_data",
                      "BucketName": "pwnd-s3-bucket-creator-prod-pwndrawdatabucket-vysphgm2oxcn",
                      "BucketConfigs": [
                        {
                          "Event": "s3:ObjectCreated:*",
                          "Rules": [
                            {
                              "Prefix": "uploads/"
                            }
                          ]
                        }
                      ]
                    }
                  },
                  "IamRoleCustomResourcesLambdaExecution": {
                    "Type": "AWS::IAM::Role",
                    "Properties": {
                      "AssumeRolePolicyDocument": {
                        "Version": "2012-10-17",
                        "Statement": [
                          {
                            "Effect": "Allow",
                            "Principal": {
                              "Service": [
                                "lambda.amazonaws.com"
                              ]
                            },
                            "Action": [
                              "sts:AssumeRole"
                            ]
                          }
                        ]
                      },
                      "Policies": [
                        {
                          "PolicyName": {
                            "Fn::Join": [
                              "-",
                              [
                                "prod",
                                "Pwnd-Backend",
                                "custom-resources-lambda"
                              ]
                            ]
                          },
                          "PolicyDocument": {
                            "Version": "2012-10-17",
                            "Statement": [
                              {
                                "Effect": "Allow",
                                "Action": [
                                  "logs:CreateLogStream",
                                  "logs:CreateLogGroup",
                                  "logs:TagResource"
                                ],
                                "Resource": [
                                  {
                                    "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/Pwnd-Backend-prod*:*"
                                  }
                                ]
                              },
                              {
                                "Effect": "Allow",
                                "Action": [
                                  "logs:PutLogEvents"
                                ],
                                "Resource": [
                                  {
                                    "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/Pwnd-Backend-prod*:*:*"
                                  }
                                ]
                              },
                              {
                                "Effect": "Allow",
                                "Resource": {
                                  "Fn::Join": [
                                    ":",
                                    [
                                      "arn",
                                      {
                                        "Ref": "AWS::Partition"
                                      },
                                      "s3",
                                      "",
                                      "",
                                      "pwnd-s3-bucket-creator-prod-pwndrawdatabucket-vysphgm2oxcn"
                                    ]
                                  ]
                                },
                                "Action": [
                                  "s3:PutBucketNotification",
                                  "s3:GetBucketNotification"
                                ]
                              },
                              {
                                "Effect": "Allow",
                                "Resource": {
                                  "Fn::Join": [
                                    ":",
                                    [
                                      "arn",
                                      {
                                        "Ref": "AWS::Partition"
                                      },
                                      "lambda",
                                      {
                                        "Ref": "AWS::Region"
                                      },
                                      {
                                        "Ref": "AWS::AccountId"
                                      },
                                      "function",
                                      "*"
                                    ]
                                  ]
                                },
                                "Action": [
                                  "lambda:AddPermission",
                                  "lambda:RemovePermission"
                                ]
                              }
                            ]
                          }
                        }
                      ]
                    }
                  },
                  "CustomDashresourceDashexistingDashs3LambdaFunction": {
                    "Type": "AWS::Lambda::Function",
                    "Properties": {
                      "Code": {
                        "S3Bucket": "serverless-framework-deployments-us-east-2-892f4b5c-f3a5",
                        "S3Key": "serverless/Pwnd-Backend/prod/1733213700634-2024-12-03T08:15:00.634Z/custom-resources.zip"
                      },
                      "FunctionName": "Pwnd-Backend-prod-custom-resource-existing-s3",
                      "Handler": "s3/handler.handler",
                      "MemorySize": 1024,
                      "Runtime": "nodejs20.x",
                      "Timeout": 180,
                      "Role": {
                        "Fn::GetAtt": [
                          "IamRoleCustomResourcesLambdaExecution",
                          "Arn"
                        ]
                      }
                    },
                    "DependsOn": [
                      "IamRoleCustomResourcesLambdaExecution",
                      "CustomDashresourceDashexistingDashs3LogGroup"
                    ]
                  },
                  "CustomDashresourceDashexistingDashs3LogGroup": {
                    "Type": "AWS::Logs::LogGroup",
                    "Properties": {
                      "LogGroupName": "/aws/lambda/Pwnd-Backend-prod-custom-resource-existing-s3"
                    }
                  },
                  "ApiGatewayRestApi": {
                    "Type": "AWS::ApiGateway::RestApi",
                    "Properties": {
                      "Name": "prod-Pwnd-Backend",
                      "EndpointConfiguration": {
                        "Types": [
                          "EDGE"
                        ]
                      },
                      "Policy": ""
                    }
                  },
                  "ApiGatewayResourceQuery": {
                    "Type": "AWS::ApiGateway::Resource",
                    "Properties": {
                      "ParentId": {
                        "Fn::GetAtt": [
                          "ApiGatewayRestApi",
                          "RootResourceId"
                        ]
                      },
                      "PathPart": "query",
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      }
                    }
                  },
                  "ApiGatewayMethodQueryOptions": {
                    "Type": "AWS::ApiGateway::Method",
                    "Properties": {
                      "AuthorizationType": "NONE",
                      "HttpMethod": "OPTIONS",
                      "MethodResponses": [
                        {
                          "StatusCode": "200",
                          "ResponseParameters": {
                            "method.response.header.Access-Control-Allow-Origin": true,
                            "method.response.header.Access-Control-Allow-Headers": true,
                            "method.response.header.Access-Control-Allow-Methods": true
                          },
                          "ResponseModels": {}
                        }
                      ],
                      "RequestParameters": {},
                      "Integration": {
                        "Type": "MOCK",
                        "RequestTemplates": {
                          "application/json": "{statusCode:200}"
                        },
                        "ContentHandling": "CONVERT_TO_TEXT",
                        "IntegrationResponses": [
                          {
                            "StatusCode": "200",
                            "ResponseParameters": {
                              "method.response.header.Access-Control-Allow-Origin": "'*'",
                              "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                              "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'"
                            },
                            "ResponseTemplates": {
                              "application/json": ""
                            }
                          }
                        ]
                      },
                      "ResourceId": {
                        "Ref": "ApiGatewayResourceQuery"
                      },
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      }
                    }
                  },
                  "ApiGatewayMethodQueryGet": {
                    "Type": "AWS::ApiGateway::Method",
                    "Properties": {
                      "HttpMethod": "GET",
                      "RequestParameters": {},
                      "ResourceId": {
                        "Ref": "ApiGatewayResourceQuery"
                      },
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "ApiKeyRequired": "<REDACTED>",
                      "AuthorizationType": "NONE",
                      "Integration": {
                        "IntegrationHttpMethod": "GET",
                        "Type": "HTTP_PROXY",
                        "Uri": {
                          "Fn::Sub": "http://${EC2InstancePublicIP}:8000/query"
                        }
                      },
                      "MethodResponses": []
                    },
                    "DependsOn": [
                      "ProxyLambdaPermissionApiGateway"
                    ]
                  },
                  "ApiGatewayDeployment1733213678436": {
                    "Type": "AWS::ApiGateway::Deployment",
                    "Properties": {
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "StageName": "prod"
                    },
                    "DependsOn": [
                      "ApiGatewayMethodQueryOptions",
                      "ApiGatewayMethodQueryGet"
                    ]
                  },
                  "ProxyLambdaPermissionApiGateway": {
                    "Type": "AWS::Lambda::Permission",
                    "Properties": {
                      "FunctionName": {
                        "Fn::GetAtt": [
                          "ProxyLambdaFunction",
                          "Arn"
                        ]
                      },
                      "Action": "lambda:InvokeFunction",
                      "Principal": "apigateway.amazonaws.com",
                      "SourceArn": {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":execute-api:",
                            {
                              "Ref": "AWS::Region"
                            },
                            ":",
                            {
                              "Ref": "AWS::AccountId"
                            },
                            ":",
                            {
                              "Ref": "ApiGatewayRestApi"
                            },
                            "/*/*"
                          ]
                        ]
                      }
                    }
                  },
                  "lambdaProcessRole": {
                    "Type": "AWS::IAM::Role",
                    "Properties": {
                      "RoleName": "lambdaDataProcessRole",
                      "AssumeRolePolicyDocument": {
                        "Version": "2012-10-17",
                        "Statement": [
                          {
                            "Effect": "Allow",
                            "Principal": {
                              "Service": [
                                "lambda.amazonaws.com"
                              ]
                            },
                            "Action": [
                              "sts:AssumeRole"
                            ]
                          }
                        ]
                      },
                      "Policies": [
                        {
                          "PolicyName": "CredsTablePolicy",
                          "PolicyDocument": {
                            "Version": "2012-10-17",
                            "Statement": [
                              {
                                "Effect": "Allow",
                                "Action": [
                                  "dynamodb:*"
                                ],
                                "Resource": {
                                  "Fn::GetAtt": [
                                    "CredentialsTable",
                                    "Arn"
                                  ]
                                }
                              }
                            ]
                          }
                        },
                        {
                          "PolicyName": "s3Policy",
                          "PolicyDocument": {
                            "Version": "2012-10-17",
                            "Statement": [
                              {
                                "Effect": "Allow",
                                "Action": [
                                  "s3:*"
                                ],
                                "Resource": "*"
                              }
                            ]
                          }
                        }
                      ],
                      "ManagedPolicyArns": [
                        "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
                      ]
                    }
                  },
                  "ec2FastAPIRole": {
                    "Type": "AWS::IAM::Role",
                    "Properties": {
                      "RoleName": "ec2FastAPIRole",
                      "AssumeRolePolicyDocument": {
                        "Version": "2012-10-17",
                        "Statement": [
                          {
                            "Effect": "Allow",
                            "Principal": {
                              "Service": [
                                "ec2.amazonaws.com"
                              ]
                            },
                            "Action": [
                              "sts:AssumeRole"
                            ]
                          }
                        ]
                      },
                      "Policies": [
                        {
                          "PolicyName": "EC2ReadDB",
                          "PolicyDocument": {
                            "Version": "2012-10-17",
                            "Statement": [
                              {
                                "Effect": "Allow",
                                "Action": [
                                  "dynamodb:*"
                                ],
                                "Resource": {
                                  "Fn::GetAtt": [
                                    "CredentialsTable",
                                    "Arn"
                                  ]
                                }
                              }
                            ]
                          }
                        },
                        {
                          "PolicyName": "EC2AccessS3",
                          "PolicyDocument": {
                            "Version": "2012-10-17",
                            "Statement": [
                              {
                                "Effect": "Allow",
                                "Action": [
                                  "s3:*"
                                ],
                                "Resource": "*"
                              }
                            ]
                          }
                        }
                      ]
                    }
                  },
                  "CredentialsTable": "<REDACTED>",
                  "FastApiSecurityGroup": {
                    "Type": "AWS::EC2::SecurityGroup",
                    "Properties": {
                      "GroupDescription": "Allow HTTP traffic to FastAPI",
                      "VpcId": {
                        "Ref": "VPC"
                      },
                      "SecurityGroupIngress": [
                        {
                          "IpProtocol": "tcp",
                          "FromPort": 8000,
                          "ToPort": 8000,
                          "CidrIp": "0.0.0.0/0"
                        },
                        {
                          "IpProtocol": "tcp",
                          "FromPort": 22,
                          "ToPort": 22,
                          "CidrIp": "0.0.0.0/0"
                        }
                      ]
                    }
                  },
                  "InternetGateway": {
                    "Type": "AWS::EC2::InternetGateway",
                    "Properties": {
                      "Tags": [
                        {
                          "Key": "Name",
                          "Value": "MyInternetGateway"
                        }
                      ]
                    }
                  },
                  "VPCGatewayAttachment": {
                    "Type": "AWS::EC2::VPCGatewayAttachment",
                    "Properties": {
                      "VpcId": {
                        "Ref": "VPC"
                      },
                      "InternetGatewayId": {
                        "Ref": "InternetGateway"
                      }
                    }
                  },
                  "PublicRouteTable": {
                    "Type": "AWS::EC2::RouteTable",
                    "Properties": {
                      "VpcId": {
                        "Ref": "VPC"
                      },
                      "Tags": [
                        {
                          "Key": "Name",
                          "Value": "PublicRouteTable"
                        }
                      ]
                    }
                  },
                  "SubnetRouteTableAssociation": {
                    "Type": "AWS::EC2::SubnetRouteTableAssociation",
                    "Properties": {
                      "SubnetId": {
                        "Ref": "PublicSubnet"
                      },
                      "RouteTableId": {
                        "Ref": "PublicRouteTable"
                      }
                    }
                  },
                  "DefaultRoute": {
                    "Type": "AWS::EC2::Route",
                    "Properties": {
                      "RouteTableId": {
                        "Ref": "PublicRouteTable"
                      },
                      "DestinationCidrBlock": "0.0.0.0/0",
                      "GatewayId": {
                        "Ref": "InternetGateway"
                      }
                    }
                  },
                  "EC2KeyPair": {
                    "Type": "AWS::EC2::KeyPair",
                    "Properties": {
                      "KeyName": "EC2KeyPairFASTAPI"
                    }
                  },
                  "FastApiInstance": {
                    "Type": "AWS::EC2::Instance",
                    "Properties": {
                      "InstanceType": "t2.micro",
                      "KeyName": {
                        "Ref": "EC2KeyPair"
                      },
                      "ImageId": "ami-0c80e2b6ccb9ad6d1",
                      "SecurityGroupIds": [
                        {
                          "Ref": "FastApiSecurityGroup"
                        }
                      ],
                      "SubnetId": {
                        "Ref": "PublicSubnet"
                      },
                      "Tags": [
                        {
                          "Key": "Name",
                          "Value": "FastApiEC2Instance"
                        }
                      ],
                      "UserData": {
                        "Fn::Base64": {
                          "Fn::Sub": "#!/bin/bash\nyum update -y\ncd /home/ec2-user\nmkdir app\naws s3 cp s3://pwnd-s3-bucket-creator-prod-pwndec2codebucket-irxvs9luvtna /home/ec2-user/app --recursive\ncd app\necho \"Credentials-Table-us-east-2\" > db_name.txt\nsudo yum install -y python3-pip\npip3 install fastapi uvicorn boto3\nnohup uvicorn app:app --host 0.0.0.0 --port 8000 > /home/ec2-user/app/server.log 2>&1 &\n"
                        }
                      },
                      "IamInstanceProfile": {
                        "Ref": "Ec2InstanceProfile"
                      }
                    }
                  },
                  "Ec2InstanceProfile": {
                    "Type": "AWS::IAM::InstanceProfile",
                    "Properties": {
                      "Path": "/",
                      "Roles": [
                        {
                          "Ref": "ec2FastAPIRole"
                        }
                      ]
                    }
                  },
                  "EC2InstancePublicIP": {
                    "Type": "AWS::EC2::EIP",
                    "Properties": {
                      "InstanceId": {
                        "Ref": "FastApiInstance"
                      }
                    }
                  },
                  "PublicSubnet": {
                    "Type": "AWS::EC2::Subnet",
                    "Properties": {
                      "VpcId": {
                        "Ref": "VPC"
                      },
                      "CidrBlock": "10.0.1.0/24",
                      "MapPublicIpOnLaunch": true,
                      "AvailabilityZone": "us-east-2a"
                    }
                  },
                  "VPC": {
                    "Type": "AWS::EC2::VPC",
                    "Properties": {
                      "CidrBlock": "10.0.0.0/16",
                      "EnableDnsSupport": true,
                      "EnableDnsHostnames": true
                    }
                  }
                },
                "Outputs": {
                  "ServerlessDeploymentBucketName": {
                    "Value": "serverless-framework-deployments-us-east-2-892f4b5c-f3a5",
                    "Export": {
                      "Name": "sls-Pwnd-Backend-prod-ServerlessDeploymentBucketName"
                    }
                  },
                  "IngestUnderscoredataLambdaFunctionQualifiedArn": {
                    "Description": "Current Lambda function version",
                    "Value": {
                      "Ref": "IngestUnderscoredataLambdaVersionA0BnlAE0NIFtKZXwZysr13aFMg2SElMXZOBhk7Rvao"
                    },
                    "Export": {
                      "Name": "sls-Pwnd-Backend-prod-IngestUnderscoredataLambdaFunctionQualifiedArn"
                    }
                  },
                  "ProxyLambdaFunctionQualifiedArn": {
                    "Description": "Current Lambda function version",
                    "Value": {
                      "Ref": "ProxyLambdaVersionkaxR7pj0IuQcHjZfYXbTyltQDLZbyjdbZbC6PBMH8ic"
                    },
                    "Export": {
                      "Name": "sls-Pwnd-Backend-prod-ProxyLambdaFunctionQualifiedArn"
                    }
                  },
                  "ServiceEndpoint": {
                    "Description": "URL of the service endpoint",
                    "Value": {
                      "Fn::Join": [
                        "",
                        [
                          "https://",
                          {
                            "Ref": "ApiGatewayRestApi"
                          },
                          ".execute-api.",
                          {
                            "Ref": "AWS::Region"
                          },
                          ".",
                          {
                            "Ref": "AWS::URLSuffix"
                          },
                          "/prod"
                        ]
                      ]
                    },
                    "Export": {
                      "Name": "sls-Pwnd-Backend-prod-ServiceEndpoint"
                    }
                  }
                }
              },
              "vpc": {}
            },
            "functions": {
              "ingest_data": {
                "handler": "lambdas/ingest_data.lambda_handler",
                "timeout": 500,
                "events": [
                  {
                    "s3": {
                      "bucket": "pwnd-s3-bucket-creator-prod-pwndrawdatabucket-vysphgm2oxcn",
                      "event": "s3:ObjectCreated:*",
                      "rules": [
                        {
                          "prefix": "uploads/"
                        }
                      ],
                      "existing": true
                    }
                  }
                ],
                "name": "Pwnd-Backend-prod-ingest_data",
                "package": {},
                "memory": 1024,
                "runtime": "python3.10",
                "vpc": {},
                "versionLogicalId": "IngestUnderscoredataLambdaVersionA0BnlAE0NIFtKZXwZysr13aFMg2SElMXZOBhk7Rvao"
              },
              "proxy": {
                "handler": "handler.dummy",
                "events": [
                  {
                    "http": {
                      "path": "query",
                      "method": "get",
                      "integration": "HTTP_PROXY",
                      "cors": {
                        "origin": "*",
                        "methods": [
                          "OPTIONS",
                          "GET"
                        ],
                        "headers": [
                          "Content-Type",
                          "X-Amz-Date",
                          "Authorization",
                          "X-Api-Key",
                          "X-Amz-Security-Token",
                          "X-Amz-User-Agent",
                          "X-Amzn-Trace-Id"
                        ],
                        "allowCredentials": "<REDACTED>"
                      },
                      "request": {
                        "uri": {
                          "Fn::Sub": "http://${EC2InstancePublicIP}:8000/query"
                        }
                      },
                      "connectionType": null
                    }
                  }
                ],
                "name": "Pwnd-Backend-prod-proxy",
                "package": {},
                "memory": 1024,
                "timeout": 6,
                "runtime": "python3.10",
                "vpc": {},
                "versionLogicalId": "ProxyLambdaVersionkaxR7pj0IuQcHjZfYXbTyltQDLZbyjdbZbC6PBMH8ic"
              }
            },
            "resources": {
              "Resources": {
                "lambdaProcessRole": {
                  "Type": "AWS::IAM::Role",
                  "Properties": {
                    "RoleName": "lambdaDataProcessRole",
                    "AssumeRolePolicyDocument": {
                      "Version": "2012-10-17",
                      "Statement": [
                        {
                          "Effect": "Allow",
                          "Principal": {
                            "Service": [
                              "lambda.amazonaws.com"
                            ]
                          },
                          "Action": [
                            "sts:AssumeRole"
                          ]
                        }
                      ]
                    },
                    "Policies": [
                      {
                        "PolicyName": "CredsTablePolicy",
                        "PolicyDocument": {
                          "Version": "2012-10-17",
                          "Statement": [
                            {
                              "Effect": "Allow",
                              "Action": [
                                "dynamodb:*"
                              ],
                              "Resource": {
                                "Fn::GetAtt": [
                                  "CredentialsTable",
                                  "Arn"
                                ]
                              }
                            }
                          ]
                        }
                      },
                      {
                        "PolicyName": "s3Policy",
                        "PolicyDocument": {
                          "Version": "2012-10-17",
                          "Statement": [
                            {
                              "Effect": "Allow",
                              "Action": [
                                "s3:*"
                              ],
                              "Resource": "*"
                            }
                          ]
                        }
                      }
                    ],
                    "ManagedPolicyArns": [
                      "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
                    ]
                  }
                },
                "ec2FastAPIRole": {
                  "Type": "AWS::IAM::Role",
                  "Properties": {
                    "RoleName": "ec2FastAPIRole",
                    "AssumeRolePolicyDocument": {
                      "Version": "2012-10-17",
                      "Statement": [
                        {
                          "Effect": "Allow",
                          "Principal": {
                            "Service": [
                              "ec2.amazonaws.com"
                            ]
                          },
                          "Action": [
                            "sts:AssumeRole"
                          ]
                        }
                      ]
                    },
                    "Policies": [
                      {
                        "PolicyName": "EC2ReadDB",
                        "PolicyDocument": {
                          "Version": "2012-10-17",
                          "Statement": [
                            {
                              "Effect": "Allow",
                              "Action": [
                                "dynamodb:*"
                              ],
                              "Resource": {
                                "Fn::GetAtt": [
                                  "CredentialsTable",
                                  "Arn"
                                ]
                              }
                            }
                          ]
                        }
                      },
                      {
                        "PolicyName": "EC2AccessS3",
                        "PolicyDocument": {
                          "Version": "2012-10-17",
                          "Statement": [
                            {
                              "Effect": "Allow",
                              "Action": [
                                "s3:*"
                              ],
                              "Resource": "*"
                            }
                          ]
                        }
                      }
                    ]
                  }
                },
                "CredentialsTable": "<REDACTED>",
                "FastApiSecurityGroup": {
                  "Type": "AWS::EC2::SecurityGroup",
                  "Properties": {
                    "GroupDescription": "Allow HTTP traffic to FastAPI",
                    "VpcId": {
                      "Ref": "VPC"
                    },
                    "SecurityGroupIngress": [
                      {
                        "IpProtocol": "tcp",
                        "FromPort": 8000,
                        "ToPort": 8000,
                        "CidrIp": "0.0.0.0/0"
                      },
                      {
                        "IpProtocol": "tcp",
                        "FromPort": 22,
                        "ToPort": 22,
                        "CidrIp": "0.0.0.0/0"
                      }
                    ]
                  }
                },
                "InternetGateway": {
                  "Type": "AWS::EC2::InternetGateway",
                  "Properties": {
                    "Tags": [
                      {
                        "Key": "Name",
                        "Value": "MyInternetGateway"
                      }
                    ]
                  }
                },
                "VPCGatewayAttachment": {
                  "Type": "AWS::EC2::VPCGatewayAttachment",
                  "Properties": {
                    "VpcId": {
                      "Ref": "VPC"
                    },
                    "InternetGatewayId": {
                      "Ref": "InternetGateway"
                    }
                  }
                },
                "PublicRouteTable": {
                  "Type": "AWS::EC2::RouteTable",
                  "Properties": {
                    "VpcId": {
                      "Ref": "VPC"
                    },
                    "Tags": [
                      {
                        "Key": "Name",
                        "Value": "PublicRouteTable"
                      }
                    ]
                  }
                },
                "SubnetRouteTableAssociation": {
                  "Type": "AWS::EC2::SubnetRouteTableAssociation",
                  "Properties": {
                    "SubnetId": {
                      "Ref": "PublicSubnet"
                    },
                    "RouteTableId": {
                      "Ref": "PublicRouteTable"
                    }
                  }
                },
                "DefaultRoute": {
                  "Type": "AWS::EC2::Route",
                  "Properties": {
                    "RouteTableId": {
                      "Ref": "PublicRouteTable"
                    },
                    "DestinationCidrBlock": "0.0.0.0/0",
                    "GatewayId": {
                      "Ref": "InternetGateway"
                    }
                  }
                },
                "EC2KeyPair": {
                  "Type": "AWS::EC2::KeyPair",
                  "Properties": {
                    "KeyName": "EC2KeyPairFASTAPI"
                  }
                },
                "FastApiInstance": {
                  "Type": "AWS::EC2::Instance",
                  "Properties": {
                    "InstanceType": "t2.micro",
                    "KeyName": {
                      "Ref": "EC2KeyPair"
                    },
                    "ImageId": "ami-0c80e2b6ccb9ad6d1",
                    "SecurityGroupIds": [
                      {
                        "Ref": "FastApiSecurityGroup"
                      }
                    ],
                    "SubnetId": {
                      "Ref": "PublicSubnet"
                    },
                    "Tags": [
                      {
                        "Key": "Name",
                        "Value": "FastApiEC2Instance"
                      }
                    ],
                    "UserData": {
                      "Fn::Base64": {
                        "Fn::Sub": "#!/bin/bash\nyum update -y\ncd /home/ec2-user\nmkdir app\naws s3 cp s3://pwnd-s3-bucket-creator-prod-pwndec2codebucket-irxvs9luvtna /home/ec2-user/app --recursive\ncd app\necho \"Credentials-Table-us-east-2\" > db_name.txt\nsudo yum install -y python3-pip\npip3 install fastapi uvicorn boto3\nnohup uvicorn app:app --host 0.0.0.0 --port 8000 > /home/ec2-user/app/server.log 2>&1 &\n"
                      }
                    },
                    "IamInstanceProfile": {
                      "Ref": "Ec2InstanceProfile"
                    },
                    "Role": null
                  }
                },
                "Ec2InstanceProfile": {
                  "Type": "AWS::IAM::InstanceProfile",
                  "Properties": {
                    "Path": "/",
                    "Roles": [
                      {
                        "Ref": "ec2FastAPIRole"
                      }
                    ]
                  }
                },
                "EC2InstancePublicIP": {
                  "Type": "AWS::EC2::EIP",
                  "Properties": {
                    "InstanceId": {
                      "Ref": "FastApiInstance"
                    }
                  }
                },
                "PublicSubnet": {
                  "Type": "AWS::EC2::Subnet",
                  "Properties": {
                    "VpcId": {
                      "Ref": "VPC"
                    },
                    "CidrBlock": "10.0.1.0/24",
                    "MapPublicIpOnLaunch": true,
                    "AvailabilityZone": "us-east-2a"
                  }
                },
                "VPC": {
                  "Type": "AWS::EC2::VPC",
                  "Properties": {
                    "CidrBlock": "10.0.0.0/16",
                    "EnableDnsSupport": true,
                    "EnableDnsHostnames": true
                  }
                }
              },
              "Outputs": {}
            },
            "custom": {
              "region": "us-east-2",
              "ec2InstanceUri": {
                "Fn::Sub": "http://${EC2InstancePublicIP}:8000/query"
              },
              "tableName": "Credentials-Table-us-east-2"
            },
            "plugins": [
              "serverless-python-requirements"
            ]
          },
          "configFileDirPath": "/home/jacob/Documents/SpyCloud Code Challenge/pwnd-backend",
          "config": {
            "type": "param"
          },
          "options": {
            "param": [
              "dataBucketName=pwnd-s3-bucket-creator-prod-pwndrawdatabucket-vysphgm2oxcn",
              "codeBucketName=pwnd-s3-bucket-creator-prod-pwndec2codebucket-irxvs9luvtna"
            ]
          },
          "stage": "prod",
          "dashboard": null,
          "logger": {
            "namespace": "s:core:resolver:param",
            "prefix": null,
            "prefixColor": null
          },
          "_credentialsPromise": "<REDACTED>"
        },
        "resolvers": {}
      },
      "self": {
        "instance": {
          "credentials": "<REDACTED>",
          "serviceConfigFile": {
            "service": "Pwnd-Backend",
            "provider": {
              "name": "aws",
              "runtime": "python3.10",
              "region": "us-east-2",
              "stage": "prod",
              "environment": {
                "CREDS_TABLE": {
                  "Ref": "CredentialsTable"
                }
              },
              "iam": {
                "role": "lambdaProcessRole"
              },
              "versionFunctions": true,
              "compiledCloudFormationTemplate": {
                "AWSTemplateFormatVersion": "2010-09-09",
                "Description": "The AWS CloudFormation template for this Serverless application",
                "Resources": {
                  "IngestUnderscoredataLogGroup": {
                    "Type": "AWS::Logs::LogGroup",
                    "Properties": {
                      "LogGroupName": "/aws/lambda/Pwnd-Backend-prod-ingest_data"
                    }
                  },
                  "ProxyLogGroup": {
                    "Type": "AWS::Logs::LogGroup",
                    "Properties": {
                      "LogGroupName": "/aws/lambda/Pwnd-Backend-prod-proxy"
                    }
                  },
                  "IngestUnderscoredataLambdaFunction": {
                    "Type": "AWS::Lambda::Function",
                    "Properties": {
                      "Code": {
                        "S3Bucket": "serverless-framework-deployments-us-east-2-892f4b5c-f3a5",
                        "S3Key": "serverless/Pwnd-Backend/prod/1733213700634-2024-12-03T08:15:00.634Z/Pwnd-Backend.zip"
                      },
                      "Handler": "lambdas/ingest_data.lambda_handler",
                      "Runtime": "python3.10",
                      "FunctionName": "Pwnd-Backend-prod-ingest_data",
                      "MemorySize": 1024,
                      "Timeout": 500,
                      "Environment": {
                        "Variables": {
                          "CREDS_TABLE": {
                            "Ref": "CredentialsTable"
                          }
                        }
                      },
                      "Role": {
                        "Fn::GetAtt": [
                          "lambdaProcessRole",
                          "Arn"
                        ]
                      }
                    },
                    "DependsOn": [
                      "IngestUnderscoredataLogGroup",
                      "lambdaProcessRole"
                    ]
                  },
                  "ProxyLambdaFunction": {
                    "Type": "AWS::Lambda::Function",
                    "Properties": {
                      "Code": {
                        "S3Bucket": "serverless-framework-deployments-us-east-2-892f4b5c-f3a5",
                        "S3Key": "serverless/Pwnd-Backend/prod/1733213700634-2024-12-03T08:15:00.634Z/Pwnd-Backend.zip"
                      },
                      "Handler": "handler.dummy",
                      "Runtime": "python3.10",
                      "FunctionName": "Pwnd-Backend-prod-proxy",
                      "MemorySize": 1024,
                      "Timeout": 6,
                      "Environment": {
                        "Variables": {
                          "CREDS_TABLE": {
                            "Ref": "CredentialsTable"
                          }
                        }
                      },
                      "Role": {
                        "Fn::GetAtt": [
                          "lambdaProcessRole",
                          "Arn"
                        ]
                      }
                    },
                    "DependsOn": [
                      "ProxyLogGroup",
                      "lambdaProcessRole"
                    ]
                  },
                  "IngestUnderscoredataLambdaVersionA0BnlAE0NIFtKZXwZysr13aFMg2SElMXZOBhk7Rvao": {
                    "Type": "AWS::Lambda::Version",
                    "DeletionPolicy": "Retain",
                    "Properties": {
                      "FunctionName": {
                        "Ref": "IngestUnderscoredataLambdaFunction"
                      },
                      "CodeSha256": "9c/g9URdJ2F/9SmwPUN0D5XTXmJNfIsHmAxEx49hVUg="
                    }
                  },
                  "ProxyLambdaVersionkaxR7pj0IuQcHjZfYXbTyltQDLZbyjdbZbC6PBMH8ic": {
                    "Type": "AWS::Lambda::Version",
                    "DeletionPolicy": "Retain",
                    "Properties": {
                      "FunctionName": {
                        "Ref": "ProxyLambdaFunction"
                      },
                      "CodeSha256": "9c/g9URdJ2F/9SmwPUN0D5XTXmJNfIsHmAxEx49hVUg="
                    }
                  },
                  "IngestUnderscoredataCustomS31": {
                    "Type": "Custom::S3",
                    "Version": "1.0",
                    "DependsOn": [
                      "IngestUnderscoredataLambdaFunction",
                      "CustomDashresourceDashexistingDashs3LambdaFunction"
                    ],
                    "Properties": {
                      "ServiceToken": "<REDACTED>",
                      "FunctionName": "Pwnd-Backend-prod-ingest_data",
                      "BucketName": "pwnd-s3-bucket-creator-prod-pwndrawdatabucket-vysphgm2oxcn",
                      "BucketConfigs": [
                        {
                          "Event": "s3:ObjectCreated:*",
                          "Rules": [
                            {
                              "Prefix": "uploads/"
                            }
                          ]
                        }
                      ]
                    }
                  },
                  "IamRoleCustomResourcesLambdaExecution": {
                    "Type": "AWS::IAM::Role",
                    "Properties": {
                      "AssumeRolePolicyDocument": {
                        "Version": "2012-10-17",
                        "Statement": [
                          {
                            "Effect": "Allow",
                            "Principal": {
                              "Service": [
                                "lambda.amazonaws.com"
                              ]
                            },
                            "Action": [
                              "sts:AssumeRole"
                            ]
                          }
                        ]
                      },
                      "Policies": [
                        {
                          "PolicyName": {
                            "Fn::Join": [
                              "-",
                              [
                                "prod",
                                "Pwnd-Backend",
                                "custom-resources-lambda"
                              ]
                            ]
                          },
                          "PolicyDocument": {
                            "Version": "2012-10-17",
                            "Statement": [
                              {
                                "Effect": "Allow",
                                "Action": [
                                  "logs:CreateLogStream",
                                  "logs:CreateLogGroup",
                                  "logs:TagResource"
                                ],
                                "Resource": [
                                  {
                                    "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/Pwnd-Backend-prod*:*"
                                  }
                                ]
                              },
                              {
                                "Effect": "Allow",
                                "Action": [
                                  "logs:PutLogEvents"
                                ],
                                "Resource": [
                                  {
                                    "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/Pwnd-Backend-prod*:*:*"
                                  }
                                ]
                              },
                              {
                                "Effect": "Allow",
                                "Resource": {
                                  "Fn::Join": [
                                    ":",
                                    [
                                      "arn",
                                      {
                                        "Ref": "AWS::Partition"
                                      },
                                      "s3",
                                      "",
                                      "",
                                      "pwnd-s3-bucket-creator-prod-pwndrawdatabucket-vysphgm2oxcn"
                                    ]
                                  ]
                                },
                                "Action": [
                                  "s3:PutBucketNotification",
                                  "s3:GetBucketNotification"
                                ]
                              },
                              {
                                "Effect": "Allow",
                                "Resource": {
                                  "Fn::Join": [
                                    ":",
                                    [
                                      "arn",
                                      {
                                        "Ref": "AWS::Partition"
                                      },
                                      "lambda",
                                      {
                                        "Ref": "AWS::Region"
                                      },
                                      {
                                        "Ref": "AWS::AccountId"
                                      },
                                      "function",
                                      "*"
                                    ]
                                  ]
                                },
                                "Action": [
                                  "lambda:AddPermission",
                                  "lambda:RemovePermission"
                                ]
                              }
                            ]
                          }
                        }
                      ]
                    }
                  },
                  "CustomDashresourceDashexistingDashs3LambdaFunction": {
                    "Type": "AWS::Lambda::Function",
                    "Properties": {
                      "Code": {
                        "S3Bucket": "serverless-framework-deployments-us-east-2-892f4b5c-f3a5",
                        "S3Key": "serverless/Pwnd-Backend/prod/1733213700634-2024-12-03T08:15:00.634Z/custom-resources.zip"
                      },
                      "FunctionName": "Pwnd-Backend-prod-custom-resource-existing-s3",
                      "Handler": "s3/handler.handler",
                      "MemorySize": 1024,
                      "Runtime": "nodejs20.x",
                      "Timeout": 180,
                      "Role": {
                        "Fn::GetAtt": [
                          "IamRoleCustomResourcesLambdaExecution",
                          "Arn"
                        ]
                      }
                    },
                    "DependsOn": [
                      "IamRoleCustomResourcesLambdaExecution",
                      "CustomDashresourceDashexistingDashs3LogGroup"
                    ]
                  },
                  "CustomDashresourceDashexistingDashs3LogGroup": {
                    "Type": "AWS::Logs::LogGroup",
                    "Properties": {
                      "LogGroupName": "/aws/lambda/Pwnd-Backend-prod-custom-resource-existing-s3"
                    }
                  },
                  "ApiGatewayRestApi": {
                    "Type": "AWS::ApiGateway::RestApi",
                    "Properties": {
                      "Name": "prod-Pwnd-Backend",
                      "EndpointConfiguration": {
                        "Types": [
                          "EDGE"
                        ]
                      },
                      "Policy": ""
                    }
                  },
                  "ApiGatewayResourceQuery": {
                    "Type": "AWS::ApiGateway::Resource",
                    "Properties": {
                      "ParentId": {
                        "Fn::GetAtt": [
                          "ApiGatewayRestApi",
                          "RootResourceId"
                        ]
                      },
                      "PathPart": "query",
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      }
                    }
                  },
                  "ApiGatewayMethodQueryOptions": {
                    "Type": "AWS::ApiGateway::Method",
                    "Properties": {
                      "AuthorizationType": "NONE",
                      "HttpMethod": "OPTIONS",
                      "MethodResponses": [
                        {
                          "StatusCode": "200",
                          "ResponseParameters": {
                            "method.response.header.Access-Control-Allow-Origin": true,
                            "method.response.header.Access-Control-Allow-Headers": true,
                            "method.response.header.Access-Control-Allow-Methods": true
                          },
                          "ResponseModels": {}
                        }
                      ],
                      "RequestParameters": {},
                      "Integration": {
                        "Type": "MOCK",
                        "RequestTemplates": {
                          "application/json": "{statusCode:200}"
                        },
                        "ContentHandling": "CONVERT_TO_TEXT",
                        "IntegrationResponses": [
                          {
                            "StatusCode": "200",
                            "ResponseParameters": {
                              "method.response.header.Access-Control-Allow-Origin": "'*'",
                              "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                              "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'"
                            },
                            "ResponseTemplates": {
                              "application/json": ""
                            }
                          }
                        ]
                      },
                      "ResourceId": {
                        "Ref": "ApiGatewayResourceQuery"
                      },
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      }
                    }
                  },
                  "ApiGatewayMethodQueryGet": {
                    "Type": "AWS::ApiGateway::Method",
                    "Properties": {
                      "HttpMethod": "GET",
                      "RequestParameters": {},
                      "ResourceId": {
                        "Ref": "ApiGatewayResourceQuery"
                      },
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "ApiKeyRequired": "<REDACTED>",
                      "AuthorizationType": "NONE",
                      "Integration": {
                        "IntegrationHttpMethod": "GET",
                        "Type": "HTTP_PROXY",
                        "Uri": {
                          "Fn::Sub": "http://${EC2InstancePublicIP}:8000/query"
                        }
                      },
                      "MethodResponses": []
                    },
                    "DependsOn": [
                      "ProxyLambdaPermissionApiGateway"
                    ]
                  },
                  "ApiGatewayDeployment1733213678436": {
                    "Type": "AWS::ApiGateway::Deployment",
                    "Properties": {
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "StageName": "prod"
                    },
                    "DependsOn": [
                      "ApiGatewayMethodQueryOptions",
                      "ApiGatewayMethodQueryGet"
                    ]
                  },
                  "ProxyLambdaPermissionApiGateway": {
                    "Type": "AWS::Lambda::Permission",
                    "Properties": {
                      "FunctionName": {
                        "Fn::GetAtt": [
                          "ProxyLambdaFunction",
                          "Arn"
                        ]
                      },
                      "Action": "lambda:InvokeFunction",
                      "Principal": "apigateway.amazonaws.com",
                      "SourceArn": {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":execute-api:",
                            {
                              "Ref": "AWS::Region"
                            },
                            ":",
                            {
                              "Ref": "AWS::AccountId"
                            },
                            ":",
                            {
                              "Ref": "ApiGatewayRestApi"
                            },
                            "/*/*"
                          ]
                        ]
                      }
                    }
                  },
                  "lambdaProcessRole": {
                    "Type": "AWS::IAM::Role",
                    "Properties": {
                      "RoleName": "lambdaDataProcessRole",
                      "AssumeRolePolicyDocument": {
                        "Version": "2012-10-17",
                        "Statement": [
                          {
                            "Effect": "Allow",
                            "Principal": {
                              "Service": [
                                "lambda.amazonaws.com"
                              ]
                            },
                            "Action": [
                              "sts:AssumeRole"
                            ]
                          }
                        ]
                      },
                      "Policies": [
                        {
                          "PolicyName": "CredsTablePolicy",
                          "PolicyDocument": {
                            "Version": "2012-10-17",
                            "Statement": [
                              {
                                "Effect": "Allow",
                                "Action": [
                                  "dynamodb:*"
                                ],
                                "Resource": {
                                  "Fn::GetAtt": [
                                    "CredentialsTable",
                                    "Arn"
                                  ]
                                }
                              }
                            ]
                          }
                        },
                        {
                          "PolicyName": "s3Policy",
                          "PolicyDocument": {
                            "Version": "2012-10-17",
                            "Statement": [
                              {
                                "Effect": "Allow",
                                "Action": [
                                  "s3:*"
                                ],
                                "Resource": "*"
                              }
                            ]
                          }
                        }
                      ],
                      "ManagedPolicyArns": [
                        "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
                      ]
                    }
                  },
                  "ec2FastAPIRole": {
                    "Type": "AWS::IAM::Role",
                    "Properties": {
                      "RoleName": "ec2FastAPIRole",
                      "AssumeRolePolicyDocument": {
                        "Version": "2012-10-17",
                        "Statement": [
                          {
                            "Effect": "Allow",
                            "Principal": {
                              "Service": [
                                "ec2.amazonaws.com"
                              ]
                            },
                            "Action": [
                              "sts:AssumeRole"
                            ]
                          }
                        ]
                      },
                      "Policies": [
                        {
                          "PolicyName": "EC2ReadDB",
                          "PolicyDocument": {
                            "Version": "2012-10-17",
                            "Statement": [
                              {
                                "Effect": "Allow",
                                "Action": [
                                  "dynamodb:*"
                                ],
                                "Resource": {
                                  "Fn::GetAtt": [
                                    "CredentialsTable",
                                    "Arn"
                                  ]
                                }
                              }
                            ]
                          }
                        },
                        {
                          "PolicyName": "EC2AccessS3",
                          "PolicyDocument": {
                            "Version": "2012-10-17",
                            "Statement": [
                              {
                                "Effect": "Allow",
                                "Action": [
                                  "s3:*"
                                ],
                                "Resource": "*"
                              }
                            ]
                          }
                        }
                      ]
                    }
                  },
                  "CredentialsTable": "<REDACTED>",
                  "FastApiSecurityGroup": {
                    "Type": "AWS::EC2::SecurityGroup",
                    "Properties": {
                      "GroupDescription": "Allow HTTP traffic to FastAPI",
                      "VpcId": {
                        "Ref": "VPC"
                      },
                      "SecurityGroupIngress": [
                        {
                          "IpProtocol": "tcp",
                          "FromPort": 8000,
                          "ToPort": 8000,
                          "CidrIp": "0.0.0.0/0"
                        },
                        {
                          "IpProtocol": "tcp",
                          "FromPort": 22,
                          "ToPort": 22,
                          "CidrIp": "0.0.0.0/0"
                        }
                      ]
                    }
                  },
                  "InternetGateway": {
                    "Type": "AWS::EC2::InternetGateway",
                    "Properties": {
                      "Tags": [
                        {
                          "Key": "Name",
                          "Value": "MyInternetGateway"
                        }
                      ]
                    }
                  },
                  "VPCGatewayAttachment": {
                    "Type": "AWS::EC2::VPCGatewayAttachment",
                    "Properties": {
                      "VpcId": {
                        "Ref": "VPC"
                      },
                      "InternetGatewayId": {
                        "Ref": "InternetGateway"
                      }
                    }
                  },
                  "PublicRouteTable": {
                    "Type": "AWS::EC2::RouteTable",
                    "Properties": {
                      "VpcId": {
                        "Ref": "VPC"
                      },
                      "Tags": [
                        {
                          "Key": "Name",
                          "Value": "PublicRouteTable"
                        }
                      ]
                    }
                  },
                  "SubnetRouteTableAssociation": {
                    "Type": "AWS::EC2::SubnetRouteTableAssociation",
                    "Properties": {
                      "SubnetId": {
                        "Ref": "PublicSubnet"
                      },
                      "RouteTableId": {
                        "Ref": "PublicRouteTable"
                      }
                    }
                  },
                  "DefaultRoute": {
                    "Type": "AWS::EC2::Route",
                    "Properties": {
                      "RouteTableId": {
                        "Ref": "PublicRouteTable"
                      },
                      "DestinationCidrBlock": "0.0.0.0/0",
                      "GatewayId": {
                        "Ref": "InternetGateway"
                      }
                    }
                  },
                  "EC2KeyPair": {
                    "Type": "AWS::EC2::KeyPair",
                    "Properties": {
                      "KeyName": "EC2KeyPairFASTAPI"
                    }
                  },
                  "FastApiInstance": {
                    "Type": "AWS::EC2::Instance",
                    "Properties": {
                      "InstanceType": "t2.micro",
                      "KeyName": {
                        "Ref": "EC2KeyPair"
                      },
                      "ImageId": "ami-0c80e2b6ccb9ad6d1",
                      "SecurityGroupIds": [
                        {
                          "Ref": "FastApiSecurityGroup"
                        }
                      ],
                      "SubnetId": {
                        "Ref": "PublicSubnet"
                      },
                      "Tags": [
                        {
                          "Key": "Name",
                          "Value": "FastApiEC2Instance"
                        }
                      ],
                      "UserData": {
                        "Fn::Base64": {
                          "Fn::Sub": "#!/bin/bash\nyum update -y\ncd /home/ec2-user\nmkdir app\naws s3 cp s3://pwnd-s3-bucket-creator-prod-pwndec2codebucket-irxvs9luvtna /home/ec2-user/app --recursive\ncd app\necho \"Credentials-Table-us-east-2\" > db_name.txt\nsudo yum install -y python3-pip\npip3 install fastapi uvicorn boto3\nnohup uvicorn app:app --host 0.0.0.0 --port 8000 > /home/ec2-user/app/server.log 2>&1 &\n"
                        }
                      },
                      "IamInstanceProfile": {
                        "Ref": "Ec2InstanceProfile"
                      }
                    }
                  },
                  "Ec2InstanceProfile": {
                    "Type": "AWS::IAM::InstanceProfile",
                    "Properties": {
                      "Path": "/",
                      "Roles": [
                        {
                          "Ref": "ec2FastAPIRole"
                        }
                      ]
                    }
                  },
                  "EC2InstancePublicIP": {
                    "Type": "AWS::EC2::EIP",
                    "Properties": {
                      "InstanceId": {
                        "Ref": "FastApiInstance"
                      }
                    }
                  },
                  "PublicSubnet": {
                    "Type": "AWS::EC2::Subnet",
                    "Properties": {
                      "VpcId": {
                        "Ref": "VPC"
                      },
                      "CidrBlock": "10.0.1.0/24",
                      "MapPublicIpOnLaunch": true,
                      "AvailabilityZone": "us-east-2a"
                    }
                  },
                  "VPC": {
                    "Type": "AWS::EC2::VPC",
                    "Properties": {
                      "CidrBlock": "10.0.0.0/16",
                      "EnableDnsSupport": true,
                      "EnableDnsHostnames": true
                    }
                  }
                },
                "Outputs": {
                  "ServerlessDeploymentBucketName": {
                    "Value": "serverless-framework-deployments-us-east-2-892f4b5c-f3a5",
                    "Export": {
                      "Name": "sls-Pwnd-Backend-prod-ServerlessDeploymentBucketName"
                    }
                  },
                  "IngestUnderscoredataLambdaFunctionQualifiedArn": {
                    "Description": "Current Lambda function version",
                    "Value": {
                      "Ref": "IngestUnderscoredataLambdaVersionA0BnlAE0NIFtKZXwZysr13aFMg2SElMXZOBhk7Rvao"
                    },
                    "Export": {
                      "Name": "sls-Pwnd-Backend-prod-IngestUnderscoredataLambdaFunctionQualifiedArn"
                    }
                  },
                  "ProxyLambdaFunctionQualifiedArn": {
                    "Description": "Current Lambda function version",
                    "Value": {
                      "Ref": "ProxyLambdaVersionkaxR7pj0IuQcHjZfYXbTyltQDLZbyjdbZbC6PBMH8ic"
                    },
                    "Export": {
                      "Name": "sls-Pwnd-Backend-prod-ProxyLambdaFunctionQualifiedArn"
                    }
                  },
                  "ServiceEndpoint": {
                    "Description": "URL of the service endpoint",
                    "Value": {
                      "Fn::Join": [
                        "",
                        [
                          "https://",
                          {
                            "Ref": "ApiGatewayRestApi"
                          },
                          ".execute-api.",
                          {
                            "Ref": "AWS::Region"
                          },
                          ".",
                          {
                            "Ref": "AWS::URLSuffix"
                          },
                          "/prod"
                        ]
                      ]
                    },
                    "Export": {
                      "Name": "sls-Pwnd-Backend-prod-ServiceEndpoint"
                    }
                  }
                }
              },
              "vpc": {}
            },
            "functions": {
              "ingest_data": {
                "handler": "lambdas/ingest_data.lambda_handler",
                "timeout": 500,
                "events": [
                  {
                    "s3": {
                      "bucket": "pwnd-s3-bucket-creator-prod-pwndrawdatabucket-vysphgm2oxcn",
                      "event": "s3:ObjectCreated:*",
                      "rules": [
                        {
                          "prefix": "uploads/"
                        }
                      ],
                      "existing": true
                    }
                  }
                ],
                "name": "Pwnd-Backend-prod-ingest_data",
                "package": {},
                "memory": 1024,
                "runtime": "python3.10",
                "vpc": {},
                "versionLogicalId": "IngestUnderscoredataLambdaVersionA0BnlAE0NIFtKZXwZysr13aFMg2SElMXZOBhk7Rvao"
              },
              "proxy": {
                "handler": "handler.dummy",
                "events": [
                  {
                    "http": {
                      "path": "query",
                      "method": "get",
                      "integration": "HTTP_PROXY",
                      "cors": {
                        "origin": "*",
                        "methods": [
                          "OPTIONS",
                          "GET"
                        ],
                        "headers": [
                          "Content-Type",
                          "X-Amz-Date",
                          "Authorization",
                          "X-Api-Key",
                          "X-Amz-Security-Token",
                          "X-Amz-User-Agent",
                          "X-Amzn-Trace-Id"
                        ],
                        "allowCredentials": "<REDACTED>"
                      },
                      "request": {
                        "uri": {
                          "Fn::Sub": "http://${EC2InstancePublicIP}:8000/query"
                        }
                      },
                      "connectionType": null
                    }
                  }
                ],
                "name": "Pwnd-Backend-prod-proxy",
                "package": {},
                "memory": 1024,
                "timeout": 6,
                "runtime": "python3.10",
                "vpc": {},
                "versionLogicalId": "ProxyLambdaVersionkaxR7pj0IuQcHjZfYXbTyltQDLZbyjdbZbC6PBMH8ic"
              }
            },
            "resources": {
              "Resources": {
                "lambdaProcessRole": {
                  "Type": "AWS::IAM::Role",
                  "Properties": {
                    "RoleName": "lambdaDataProcessRole",
                    "AssumeRolePolicyDocument": {
                      "Version": "2012-10-17",
                      "Statement": [
                        {
                          "Effect": "Allow",
                          "Principal": {
                            "Service": [
                              "lambda.amazonaws.com"
                            ]
                          },
                          "Action": [
                            "sts:AssumeRole"
                          ]
                        }
                      ]
                    },
                    "Policies": [
                      {
                        "PolicyName": "CredsTablePolicy",
                        "PolicyDocument": {
                          "Version": "2012-10-17",
                          "Statement": [
                            {
                              "Effect": "Allow",
                              "Action": [
                                "dynamodb:*"
                              ],
                              "Resource": {
                                "Fn::GetAtt": [
                                  "CredentialsTable",
                                  "Arn"
                                ]
                              }
                            }
                          ]
                        }
                      },
                      {
                        "PolicyName": "s3Policy",
                        "PolicyDocument": {
                          "Version": "2012-10-17",
                          "Statement": [
                            {
                              "Effect": "Allow",
                              "Action": [
                                "s3:*"
                              ],
                              "Resource": "*"
                            }
                          ]
                        }
                      }
                    ],
                    "ManagedPolicyArns": [
                      "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
                    ]
                  }
                },
                "ec2FastAPIRole": {
                  "Type": "AWS::IAM::Role",
                  "Properties": {
                    "RoleName": "ec2FastAPIRole",
                    "AssumeRolePolicyDocument": {
                      "Version": "2012-10-17",
                      "Statement": [
                        {
                          "Effect": "Allow",
                          "Principal": {
                            "Service": [
                              "ec2.amazonaws.com"
                            ]
                          },
                          "Action": [
                            "sts:AssumeRole"
                          ]
                        }
                      ]
                    },
                    "Policies": [
                      {
                        "PolicyName": "EC2ReadDB",
                        "PolicyDocument": {
                          "Version": "2012-10-17",
                          "Statement": [
                            {
                              "Effect": "Allow",
                              "Action": [
                                "dynamodb:*"
                              ],
                              "Resource": {
                                "Fn::GetAtt": [
                                  "CredentialsTable",
                                  "Arn"
                                ]
                              }
                            }
                          ]
                        }
                      },
                      {
                        "PolicyName": "EC2AccessS3",
                        "PolicyDocument": {
                          "Version": "2012-10-17",
                          "Statement": [
                            {
                              "Effect": "Allow",
                              "Action": [
                                "s3:*"
                              ],
                              "Resource": "*"
                            }
                          ]
                        }
                      }
                    ]
                  }
                },
                "CredentialsTable": "<REDACTED>",
                "FastApiSecurityGroup": {
                  "Type": "AWS::EC2::SecurityGroup",
                  "Properties": {
                    "GroupDescription": "Allow HTTP traffic to FastAPI",
                    "VpcId": {
                      "Ref": "VPC"
                    },
                    "SecurityGroupIngress": [
                      {
                        "IpProtocol": "tcp",
                        "FromPort": 8000,
                        "ToPort": 8000,
                        "CidrIp": "0.0.0.0/0"
                      },
                      {
                        "IpProtocol": "tcp",
                        "FromPort": 22,
                        "ToPort": 22,
                        "CidrIp": "0.0.0.0/0"
                      }
                    ]
                  }
                },
                "InternetGateway": {
                  "Type": "AWS::EC2::InternetGateway",
                  "Properties": {
                    "Tags": [
                      {
                        "Key": "Name",
                        "Value": "MyInternetGateway"
                      }
                    ]
                  }
                },
                "VPCGatewayAttachment": {
                  "Type": "AWS::EC2::VPCGatewayAttachment",
                  "Properties": {
                    "VpcId": {
                      "Ref": "VPC"
                    },
                    "InternetGatewayId": {
                      "Ref": "InternetGateway"
                    }
                  }
                },
                "PublicRouteTable": {
                  "Type": "AWS::EC2::RouteTable",
                  "Properties": {
                    "VpcId": {
                      "Ref": "VPC"
                    },
                    "Tags": [
                      {
                        "Key": "Name",
                        "Value": "PublicRouteTable"
                      }
                    ]
                  }
                },
                "SubnetRouteTableAssociation": {
                  "Type": "AWS::EC2::SubnetRouteTableAssociation",
                  "Properties": {
                    "SubnetId": {
                      "Ref": "PublicSubnet"
                    },
                    "RouteTableId": {
                      "Ref": "PublicRouteTable"
                    }
                  }
                },
                "DefaultRoute": {
                  "Type": "AWS::EC2::Route",
                  "Properties": {
                    "RouteTableId": {
                      "Ref": "PublicRouteTable"
                    },
                    "DestinationCidrBlock": "0.0.0.0/0",
                    "GatewayId": {
                      "Ref": "InternetGateway"
                    }
                  }
                },
                "EC2KeyPair": {
                  "Type": "AWS::EC2::KeyPair",
                  "Properties": {
                    "KeyName": "EC2KeyPairFASTAPI"
                  }
                },
                "FastApiInstance": {
                  "Type": "AWS::EC2::Instance",
                  "Properties": {
                    "InstanceType": "t2.micro",
                    "KeyName": {
                      "Ref": "EC2KeyPair"
                    },
                    "ImageId": "ami-0c80e2b6ccb9ad6d1",
                    "SecurityGroupIds": [
                      {
                        "Ref": "FastApiSecurityGroup"
                      }
                    ],
                    "SubnetId": {
                      "Ref": "PublicSubnet"
                    },
                    "Tags": [
                      {
                        "Key": "Name",
                        "Value": "FastApiEC2Instance"
                      }
                    ],
                    "UserData": {
                      "Fn::Base64": {
                        "Fn::Sub": "#!/bin/bash\nyum update -y\ncd /home/ec2-user\nmkdir app\naws s3 cp s3://pwnd-s3-bucket-creator-prod-pwndec2codebucket-irxvs9luvtna /home/ec2-user/app --recursive\ncd app\necho \"Credentials-Table-us-east-2\" > db_name.txt\nsudo yum install -y python3-pip\npip3 install fastapi uvicorn boto3\nnohup uvicorn app:app --host 0.0.0.0 --port 8000 > /home/ec2-user/app/server.log 2>&1 &\n"
                      }
                    },
                    "IamInstanceProfile": {
                      "Ref": "Ec2InstanceProfile"
                    },
                    "Role": null
                  }
                },
                "Ec2InstanceProfile": {
                  "Type": "AWS::IAM::InstanceProfile",
                  "Properties": {
                    "Path": "/",
                    "Roles": [
                      {
                        "Ref": "ec2FastAPIRole"
                      }
                    ]
                  }
                },
                "EC2InstancePublicIP": {
                  "Type": "AWS::EC2::EIP",
                  "Properties": {
                    "InstanceId": {
                      "Ref": "FastApiInstance"
                    }
                  }
                },
                "PublicSubnet": {
                  "Type": "AWS::EC2::Subnet",
                  "Properties": {
                    "VpcId": {
                      "Ref": "VPC"
                    },
                    "CidrBlock": "10.0.1.0/24",
                    "MapPublicIpOnLaunch": true,
                    "AvailabilityZone": "us-east-2a"
                  }
                },
                "VPC": {
                  "Type": "AWS::EC2::VPC",
                  "Properties": {
                    "CidrBlock": "10.0.0.0/16",
                    "EnableDnsSupport": true,
                    "EnableDnsHostnames": true
                  }
                }
              },
              "Outputs": {}
            },
            "custom": {
              "region": "us-east-2",
              "ec2InstanceUri": {
                "Fn::Sub": "http://${EC2InstancePublicIP}:8000/query"
              },
              "tableName": "Credentials-Table-us-east-2"
            },
            "plugins": [
              "serverless-python-requirements"
            ]
          },
          "configFileDirPath": "/home/jacob/Documents/SpyCloud Code Challenge/pwnd-backend",
          "config": {
            "type": "self"
          },
          "options": {
            "param": [
              "dataBucketName=pwnd-s3-bucket-creator-prod-pwndrawdatabucket-vysphgm2oxcn",
              "codeBucketName=pwnd-s3-bucket-creator-prod-pwndec2codebucket-irxvs9luvtna"
            ]
          },
          "stage": "prod",
          "dashboard": null,
          "logger": {
            "namespace": "s:core:resolver:self",
            "prefix": null,
            "prefixColor": null
          },
          "_credentialsPromise": "<REDACTED>"
        },
        "resolvers": {}
      },
      "sls": {
        "instance": {
          "credentials": "<REDACTED>",
          "serviceConfigFile": {
            "service": "Pwnd-Backend",
            "provider": {
              "name": "aws",
              "runtime": "python3.10",
              "region": "us-east-2",
              "stage": "prod",
              "environment": {
                "CREDS_TABLE": {
                  "Ref": "CredentialsTable"
                }
              },
              "iam": {
                "role": "lambdaProcessRole"
              },
              "versionFunctions": true,
              "compiledCloudFormationTemplate": {
                "AWSTemplateFormatVersion": "2010-09-09",
                "Description": "The AWS CloudFormation template for this Serverless application",
                "Resources": {
                  "IngestUnderscoredataLogGroup": {
                    "Type": "AWS::Logs::LogGroup",
                    "Properties": {
                      "LogGroupName": "/aws/lambda/Pwnd-Backend-prod-ingest_data"
                    }
                  },
                  "ProxyLogGroup": {
                    "Type": "AWS::Logs::LogGroup",
                    "Properties": {
                      "LogGroupName": "/aws/lambda/Pwnd-Backend-prod-proxy"
                    }
                  },
                  "IngestUnderscoredataLambdaFunction": {
                    "Type": "AWS::Lambda::Function",
                    "Properties": {
                      "Code": {
                        "S3Bucket": "serverless-framework-deployments-us-east-2-892f4b5c-f3a5",
                        "S3Key": "serverless/Pwnd-Backend/prod/1733213700634-2024-12-03T08:15:00.634Z/Pwnd-Backend.zip"
                      },
                      "Handler": "lambdas/ingest_data.lambda_handler",
                      "Runtime": "python3.10",
                      "FunctionName": "Pwnd-Backend-prod-ingest_data",
                      "MemorySize": 1024,
                      "Timeout": 500,
                      "Environment": {
                        "Variables": {
                          "CREDS_TABLE": {
                            "Ref": "CredentialsTable"
                          }
                        }
                      },
                      "Role": {
                        "Fn::GetAtt": [
                          "lambdaProcessRole",
                          "Arn"
                        ]
                      }
                    },
                    "DependsOn": [
                      "IngestUnderscoredataLogGroup",
                      "lambdaProcessRole"
                    ]
                  },
                  "ProxyLambdaFunction": {
                    "Type": "AWS::Lambda::Function",
                    "Properties": {
                      "Code": {
                        "S3Bucket": "serverless-framework-deployments-us-east-2-892f4b5c-f3a5",
                        "S3Key": "serverless/Pwnd-Backend/prod/1733213700634-2024-12-03T08:15:00.634Z/Pwnd-Backend.zip"
                      },
                      "Handler": "handler.dummy",
                      "Runtime": "python3.10",
                      "FunctionName": "Pwnd-Backend-prod-proxy",
                      "MemorySize": 1024,
                      "Timeout": 6,
                      "Environment": {
                        "Variables": {
                          "CREDS_TABLE": {
                            "Ref": "CredentialsTable"
                          }
                        }
                      },
                      "Role": {
                        "Fn::GetAtt": [
                          "lambdaProcessRole",
                          "Arn"
                        ]
                      }
                    },
                    "DependsOn": [
                      "ProxyLogGroup",
                      "lambdaProcessRole"
                    ]
                  },
                  "IngestUnderscoredataLambdaVersionA0BnlAE0NIFtKZXwZysr13aFMg2SElMXZOBhk7Rvao": {
                    "Type": "AWS::Lambda::Version",
                    "DeletionPolicy": "Retain",
                    "Properties": {
                      "FunctionName": {
                        "Ref": "IngestUnderscoredataLambdaFunction"
                      },
                      "CodeSha256": "9c/g9URdJ2F/9SmwPUN0D5XTXmJNfIsHmAxEx49hVUg="
                    }
                  },
                  "ProxyLambdaVersionkaxR7pj0IuQcHjZfYXbTyltQDLZbyjdbZbC6PBMH8ic": {
                    "Type": "AWS::Lambda::Version",
                    "DeletionPolicy": "Retain",
                    "Properties": {
                      "FunctionName": {
                        "Ref": "ProxyLambdaFunction"
                      },
                      "CodeSha256": "9c/g9URdJ2F/9SmwPUN0D5XTXmJNfIsHmAxEx49hVUg="
                    }
                  },
                  "IngestUnderscoredataCustomS31": {
                    "Type": "Custom::S3",
                    "Version": "1.0",
                    "DependsOn": [
                      "IngestUnderscoredataLambdaFunction",
                      "CustomDashresourceDashexistingDashs3LambdaFunction"
                    ],
                    "Properties": {
                      "ServiceToken": "<REDACTED>",
                      "FunctionName": "Pwnd-Backend-prod-ingest_data",
                      "BucketName": "pwnd-s3-bucket-creator-prod-pwndrawdatabucket-vysphgm2oxcn",
                      "BucketConfigs": [
                        {
                          "Event": "s3:ObjectCreated:*",
                          "Rules": [
                            {
                              "Prefix": "uploads/"
                            }
                          ]
                        }
                      ]
                    }
                  },
                  "IamRoleCustomResourcesLambdaExecution": {
                    "Type": "AWS::IAM::Role",
                    "Properties": {
                      "AssumeRolePolicyDocument": {
                        "Version": "2012-10-17",
                        "Statement": [
                          {
                            "Effect": "Allow",
                            "Principal": {
                              "Service": [
                                "lambda.amazonaws.com"
                              ]
                            },
                            "Action": [
                              "sts:AssumeRole"
                            ]
                          }
                        ]
                      },
                      "Policies": [
                        {
                          "PolicyName": {
                            "Fn::Join": [
                              "-",
                              [
                                "prod",
                                "Pwnd-Backend",
                                "custom-resources-lambda"
                              ]
                            ]
                          },
                          "PolicyDocument": {
                            "Version": "2012-10-17",
                            "Statement": [
                              {
                                "Effect": "Allow",
                                "Action": [
                                  "logs:CreateLogStream",
                                  "logs:CreateLogGroup",
                                  "logs:TagResource"
                                ],
                                "Resource": [
                                  {
                                    "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/Pwnd-Backend-prod*:*"
                                  }
                                ]
                              },
                              {
                                "Effect": "Allow",
                                "Action": [
                                  "logs:PutLogEvents"
                                ],
                                "Resource": [
                                  {
                                    "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/Pwnd-Backend-prod*:*:*"
                                  }
                                ]
                              },
                              {
                                "Effect": "Allow",
                                "Resource": {
                                  "Fn::Join": [
                                    ":",
                                    [
                                      "arn",
                                      {
                                        "Ref": "AWS::Partition"
                                      },
                                      "s3",
                                      "",
                                      "",
                                      "pwnd-s3-bucket-creator-prod-pwndrawdatabucket-vysphgm2oxcn"
                                    ]
                                  ]
                                },
                                "Action": [
                                  "s3:PutBucketNotification",
                                  "s3:GetBucketNotification"
                                ]
                              },
                              {
                                "Effect": "Allow",
                                "Resource": {
                                  "Fn::Join": [
                                    ":",
                                    [
                                      "arn",
                                      {
                                        "Ref": "AWS::Partition"
                                      },
                                      "lambda",
                                      {
                                        "Ref": "AWS::Region"
                                      },
                                      {
                                        "Ref": "AWS::AccountId"
                                      },
                                      "function",
                                      "*"
                                    ]
                                  ]
                                },
                                "Action": [
                                  "lambda:AddPermission",
                                  "lambda:RemovePermission"
                                ]
                              }
                            ]
                          }
                        }
                      ]
                    }
                  },
                  "CustomDashresourceDashexistingDashs3LambdaFunction": {
                    "Type": "AWS::Lambda::Function",
                    "Properties": {
                      "Code": {
                        "S3Bucket": "serverless-framework-deployments-us-east-2-892f4b5c-f3a5",
                        "S3Key": "serverless/Pwnd-Backend/prod/1733213700634-2024-12-03T08:15:00.634Z/custom-resources.zip"
                      },
                      "FunctionName": "Pwnd-Backend-prod-custom-resource-existing-s3",
                      "Handler": "s3/handler.handler",
                      "MemorySize": 1024,
                      "Runtime": "nodejs20.x",
                      "Timeout": 180,
                      "Role": {
                        "Fn::GetAtt": [
                          "IamRoleCustomResourcesLambdaExecution",
                          "Arn"
                        ]
                      }
                    },
                    "DependsOn": [
                      "IamRoleCustomResourcesLambdaExecution",
                      "CustomDashresourceDashexistingDashs3LogGroup"
                    ]
                  },
                  "CustomDashresourceDashexistingDashs3LogGroup": {
                    "Type": "AWS::Logs::LogGroup",
                    "Properties": {
                      "LogGroupName": "/aws/lambda/Pwnd-Backend-prod-custom-resource-existing-s3"
                    }
                  },
                  "ApiGatewayRestApi": {
                    "Type": "AWS::ApiGateway::RestApi",
                    "Properties": {
                      "Name": "prod-Pwnd-Backend",
                      "EndpointConfiguration": {
                        "Types": [
                          "EDGE"
                        ]
                      },
                      "Policy": ""
                    }
                  },
                  "ApiGatewayResourceQuery": {
                    "Type": "AWS::ApiGateway::Resource",
                    "Properties": {
                      "ParentId": {
                        "Fn::GetAtt": [
                          "ApiGatewayRestApi",
                          "RootResourceId"
                        ]
                      },
                      "PathPart": "query",
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      }
                    }
                  },
                  "ApiGatewayMethodQueryOptions": {
                    "Type": "AWS::ApiGateway::Method",
                    "Properties": {
                      "AuthorizationType": "NONE",
                      "HttpMethod": "OPTIONS",
                      "MethodResponses": [
                        {
                          "StatusCode": "200",
                          "ResponseParameters": {
                            "method.response.header.Access-Control-Allow-Origin": true,
                            "method.response.header.Access-Control-Allow-Headers": true,
                            "method.response.header.Access-Control-Allow-Methods": true
                          },
                          "ResponseModels": {}
                        }
                      ],
                      "RequestParameters": {},
                      "Integration": {
                        "Type": "MOCK",
                        "RequestTemplates": {
                          "application/json": "{statusCode:200}"
                        },
                        "ContentHandling": "CONVERT_TO_TEXT",
                        "IntegrationResponses": [
                          {
                            "StatusCode": "200",
                            "ResponseParameters": {
                              "method.response.header.Access-Control-Allow-Origin": "'*'",
                              "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                              "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'"
                            },
                            "ResponseTemplates": {
                              "application/json": ""
                            }
                          }
                        ]
                      },
                      "ResourceId": {
                        "Ref": "ApiGatewayResourceQuery"
                      },
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      }
                    }
                  },
                  "ApiGatewayMethodQueryGet": {
                    "Type": "AWS::ApiGateway::Method",
                    "Properties": {
                      "HttpMethod": "GET",
                      "RequestParameters": {},
                      "ResourceId": {
                        "Ref": "ApiGatewayResourceQuery"
                      },
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "ApiKeyRequired": "<REDACTED>",
                      "AuthorizationType": "NONE",
                      "Integration": {
                        "IntegrationHttpMethod": "GET",
                        "Type": "HTTP_PROXY",
                        "Uri": {
                          "Fn::Sub": "http://${EC2InstancePublicIP}:8000/query"
                        }
                      },
                      "MethodResponses": []
                    },
                    "DependsOn": [
                      "ProxyLambdaPermissionApiGateway"
                    ]
                  },
                  "ApiGatewayDeployment1733213678436": {
                    "Type": "AWS::ApiGateway::Deployment",
                    "Properties": {
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "StageName": "prod"
                    },
                    "DependsOn": [
                      "ApiGatewayMethodQueryOptions",
                      "ApiGatewayMethodQueryGet"
                    ]
                  },
                  "ProxyLambdaPermissionApiGateway": {
                    "Type": "AWS::Lambda::Permission",
                    "Properties": {
                      "FunctionName": {
                        "Fn::GetAtt": [
                          "ProxyLambdaFunction",
                          "Arn"
                        ]
                      },
                      "Action": "lambda:InvokeFunction",
                      "Principal": "apigateway.amazonaws.com",
                      "SourceArn": {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":execute-api:",
                            {
                              "Ref": "AWS::Region"
                            },
                            ":",
                            {
                              "Ref": "AWS::AccountId"
                            },
                            ":",
                            {
                              "Ref": "ApiGatewayRestApi"
                            },
                            "/*/*"
                          ]
                        ]
                      }
                    }
                  },
                  "lambdaProcessRole": {
                    "Type": "AWS::IAM::Role",
                    "Properties": {
                      "RoleName": "lambdaDataProcessRole",
                      "AssumeRolePolicyDocument": {
                        "Version": "2012-10-17",
                        "Statement": [
                          {
                            "Effect": "Allow",
                            "Principal": {
                              "Service": [
                                "lambda.amazonaws.com"
                              ]
                            },
                            "Action": [
                              "sts:AssumeRole"
                            ]
                          }
                        ]
                      },
                      "Policies": [
                        {
                          "PolicyName": "CredsTablePolicy",
                          "PolicyDocument": {
                            "Version": "2012-10-17",
                            "Statement": [
                              {
                                "Effect": "Allow",
                                "Action": [
                                  "dynamodb:*"
                                ],
                                "Resource": {
                                  "Fn::GetAtt": [
                                    "CredentialsTable",
                                    "Arn"
                                  ]
                                }
                              }
                            ]
                          }
                        },
                        {
                          "PolicyName": "s3Policy",
                          "PolicyDocument": {
                            "Version": "2012-10-17",
                            "Statement": [
                              {
                                "Effect": "Allow",
                                "Action": [
                                  "s3:*"
                                ],
                                "Resource": "*"
                              }
                            ]
                          }
                        }
                      ],
                      "ManagedPolicyArns": [
                        "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
                      ]
                    }
                  },
                  "ec2FastAPIRole": {
                    "Type": "AWS::IAM::Role",
                    "Properties": {
                      "RoleName": "ec2FastAPIRole",
                      "AssumeRolePolicyDocument": {
                        "Version": "2012-10-17",
                        "Statement": [
                          {
                            "Effect": "Allow",
                            "Principal": {
                              "Service": [
                                "ec2.amazonaws.com"
                              ]
                            },
                            "Action": [
                              "sts:AssumeRole"
                            ]
                          }
                        ]
                      },
                      "Policies": [
                        {
                          "PolicyName": "EC2ReadDB",
                          "PolicyDocument": {
                            "Version": "2012-10-17",
                            "Statement": [
                              {
                                "Effect": "Allow",
                                "Action": [
                                  "dynamodb:*"
                                ],
                                "Resource": {
                                  "Fn::GetAtt": [
                                    "CredentialsTable",
                                    "Arn"
                                  ]
                                }
                              }
                            ]
                          }
                        },
                        {
                          "PolicyName": "EC2AccessS3",
                          "PolicyDocument": {
                            "Version": "2012-10-17",
                            "Statement": [
                              {
                                "Effect": "Allow",
                                "Action": [
                                  "s3:*"
                                ],
                                "Resource": "*"
                              }
                            ]
                          }
                        }
                      ]
                    }
                  },
                  "CredentialsTable": "<REDACTED>",
                  "FastApiSecurityGroup": {
                    "Type": "AWS::EC2::SecurityGroup",
                    "Properties": {
                      "GroupDescription": "Allow HTTP traffic to FastAPI",
                      "VpcId": {
                        "Ref": "VPC"
                      },
                      "SecurityGroupIngress": [
                        {
                          "IpProtocol": "tcp",
                          "FromPort": 8000,
                          "ToPort": 8000,
                          "CidrIp": "0.0.0.0/0"
                        },
                        {
                          "IpProtocol": "tcp",
                          "FromPort": 22,
                          "ToPort": 22,
                          "CidrIp": "0.0.0.0/0"
                        }
                      ]
                    }
                  },
                  "InternetGateway": {
                    "Type": "AWS::EC2::InternetGateway",
                    "Properties": {
                      "Tags": [
                        {
                          "Key": "Name",
                          "Value": "MyInternetGateway"
                        }
                      ]
                    }
                  },
                  "VPCGatewayAttachment": {
                    "Type": "AWS::EC2::VPCGatewayAttachment",
                    "Properties": {
                      "VpcId": {
                        "Ref": "VPC"
                      },
                      "InternetGatewayId": {
                        "Ref": "InternetGateway"
                      }
                    }
                  },
                  "PublicRouteTable": {
                    "Type": "AWS::EC2::RouteTable",
                    "Properties": {
                      "VpcId": {
                        "Ref": "VPC"
                      },
                      "Tags": [
                        {
                          "Key": "Name",
                          "Value": "PublicRouteTable"
                        }
                      ]
                    }
                  },
                  "SubnetRouteTableAssociation": {
                    "Type": "AWS::EC2::SubnetRouteTableAssociation",
                    "Properties": {
                      "SubnetId": {
                        "Ref": "PublicSubnet"
                      },
                      "RouteTableId": {
                        "Ref": "PublicRouteTable"
                      }
                    }
                  },
                  "DefaultRoute": {
                    "Type": "AWS::EC2::Route",
                    "Properties": {
                      "RouteTableId": {
                        "Ref": "PublicRouteTable"
                      },
                      "DestinationCidrBlock": "0.0.0.0/0",
                      "GatewayId": {
                        "Ref": "InternetGateway"
                      }
                    }
                  },
                  "EC2KeyPair": {
                    "Type": "AWS::EC2::KeyPair",
                    "Properties": {
                      "KeyName": "EC2KeyPairFASTAPI"
                    }
                  },
                  "FastApiInstance": {
                    "Type": "AWS::EC2::Instance",
                    "Properties": {
                      "InstanceType": "t2.micro",
                      "KeyName": {
                        "Ref": "EC2KeyPair"
                      },
                      "ImageId": "ami-0c80e2b6ccb9ad6d1",
                      "SecurityGroupIds": [
                        {
                          "Ref": "FastApiSecurityGroup"
                        }
                      ],
                      "SubnetId": {
                        "Ref": "PublicSubnet"
                      },
                      "Tags": [
                        {
                          "Key": "Name",
                          "Value": "FastApiEC2Instance"
                        }
                      ],
                      "UserData": {
                        "Fn::Base64": {
                          "Fn::Sub": "#!/bin/bash\nyum update -y\ncd /home/ec2-user\nmkdir app\naws s3 cp s3://pwnd-s3-bucket-creator-prod-pwndec2codebucket-irxvs9luvtna /home/ec2-user/app --recursive\ncd app\necho \"Credentials-Table-us-east-2\" > db_name.txt\nsudo yum install -y python3-pip\npip3 install fastapi uvicorn boto3\nnohup uvicorn app:app --host 0.0.0.0 --port 8000 > /home/ec2-user/app/server.log 2>&1 &\n"
                        }
                      },
                      "IamInstanceProfile": {
                        "Ref": "Ec2InstanceProfile"
                      }
                    }
                  },
                  "Ec2InstanceProfile": {
                    "Type": "AWS::IAM::InstanceProfile",
                    "Properties": {
                      "Path": "/",
                      "Roles": [
                        {
                          "Ref": "ec2FastAPIRole"
                        }
                      ]
                    }
                  },
                  "EC2InstancePublicIP": {
                    "Type": "AWS::EC2::EIP",
                    "Properties": {
                      "InstanceId": {
                        "Ref": "FastApiInstance"
                      }
                    }
                  },
                  "PublicSubnet": {
                    "Type": "AWS::EC2::Subnet",
                    "Properties": {
                      "VpcId": {
                        "Ref": "VPC"
                      },
                      "CidrBlock": "10.0.1.0/24",
                      "MapPublicIpOnLaunch": true,
                      "AvailabilityZone": "us-east-2a"
                    }
                  },
                  "VPC": {
                    "Type": "AWS::EC2::VPC",
                    "Properties": {
                      "CidrBlock": "10.0.0.0/16",
                      "EnableDnsSupport": true,
                      "EnableDnsHostnames": true
                    }
                  }
                },
                "Outputs": {
                  "ServerlessDeploymentBucketName": {
                    "Value": "serverless-framework-deployments-us-east-2-892f4b5c-f3a5",
                    "Export": {
                      "Name": "sls-Pwnd-Backend-prod-ServerlessDeploymentBucketName"
                    }
                  },
                  "IngestUnderscoredataLambdaFunctionQualifiedArn": {
                    "Description": "Current Lambda function version",
                    "Value": {
                      "Ref": "IngestUnderscoredataLambdaVersionA0BnlAE0NIFtKZXwZysr13aFMg2SElMXZOBhk7Rvao"
                    },
                    "Export": {
                      "Name": "sls-Pwnd-Backend-prod-IngestUnderscoredataLambdaFunctionQualifiedArn"
                    }
                  },
                  "ProxyLambdaFunctionQualifiedArn": {
                    "Description": "Current Lambda function version",
                    "Value": {
                      "Ref": "ProxyLambdaVersionkaxR7pj0IuQcHjZfYXbTyltQDLZbyjdbZbC6PBMH8ic"
                    },
                    "Export": {
                      "Name": "sls-Pwnd-Backend-prod-ProxyLambdaFunctionQualifiedArn"
                    }
                  },
                  "ServiceEndpoint": {
                    "Description": "URL of the service endpoint",
                    "Value": {
                      "Fn::Join": [
                        "",
                        [
                          "https://",
                          {
                            "Ref": "ApiGatewayRestApi"
                          },
                          ".execute-api.",
                          {
                            "Ref": "AWS::Region"
                          },
                          ".",
                          {
                            "Ref": "AWS::URLSuffix"
                          },
                          "/prod"
                        ]
                      ]
                    },
                    "Export": {
                      "Name": "sls-Pwnd-Backend-prod-ServiceEndpoint"
                    }
                  }
                }
              },
              "vpc": {}
            },
            "functions": {
              "ingest_data": {
                "handler": "lambdas/ingest_data.lambda_handler",
                "timeout": 500,
                "events": [
                  {
                    "s3": {
                      "bucket": "pwnd-s3-bucket-creator-prod-pwndrawdatabucket-vysphgm2oxcn",
                      "event": "s3:ObjectCreated:*",
                      "rules": [
                        {
                          "prefix": "uploads/"
                        }
                      ],
                      "existing": true
                    }
                  }
                ],
                "name": "Pwnd-Backend-prod-ingest_data",
                "package": {},
                "memory": 1024,
                "runtime": "python3.10",
                "vpc": {},
                "versionLogicalId": "IngestUnderscoredataLambdaVersionA0BnlAE0NIFtKZXwZysr13aFMg2SElMXZOBhk7Rvao"
              },
              "proxy": {
                "handler": "handler.dummy",
                "events": [
                  {
                    "http": {
                      "path": "query",
                      "method": "get",
                      "integration": "HTTP_PROXY",
                      "cors": {
                        "origin": "*",
                        "methods": [
                          "OPTIONS",
                          "GET"
                        ],
                        "headers": [
                          "Content-Type",
                          "X-Amz-Date",
                          "Authorization",
                          "X-Api-Key",
                          "X-Amz-Security-Token",
                          "X-Amz-User-Agent",
                          "X-Amzn-Trace-Id"
                        ],
                        "allowCredentials": "<REDACTED>"
                      },
                      "request": {
                        "uri": {
                          "Fn::Sub": "http://${EC2InstancePublicIP}:8000/query"
                        }
                      },
                      "connectionType": null
                    }
                  }
                ],
                "name": "Pwnd-Backend-prod-proxy",
                "package": {},
                "memory": 1024,
                "timeout": 6,
                "runtime": "python3.10",
                "vpc": {},
                "versionLogicalId": "ProxyLambdaVersionkaxR7pj0IuQcHjZfYXbTyltQDLZbyjdbZbC6PBMH8ic"
              }
            },
            "resources": {
              "Resources": {
                "lambdaProcessRole": {
                  "Type": "AWS::IAM::Role",
                  "Properties": {
                    "RoleName": "lambdaDataProcessRole",
                    "AssumeRolePolicyDocument": {
                      "Version": "2012-10-17",
                      "Statement": [
                        {
                          "Effect": "Allow",
                          "Principal": {
                            "Service": [
                              "lambda.amazonaws.com"
                            ]
                          },
                          "Action": [
                            "sts:AssumeRole"
                          ]
                        }
                      ]
                    },
                    "Policies": [
                      {
                        "PolicyName": "CredsTablePolicy",
                        "PolicyDocument": {
                          "Version": "2012-10-17",
                          "Statement": [
                            {
                              "Effect": "Allow",
                              "Action": [
                                "dynamodb:*"
                              ],
                              "Resource": {
                                "Fn::GetAtt": [
                                  "CredentialsTable",
                                  "Arn"
                                ]
                              }
                            }
                          ]
                        }
                      },
                      {
                        "PolicyName": "s3Policy",
                        "PolicyDocument": {
                          "Version": "2012-10-17",
                          "Statement": [
                            {
                              "Effect": "Allow",
                              "Action": [
                                "s3:*"
                              ],
                              "Resource": "*"
                            }
                          ]
                        }
                      }
                    ],
                    "ManagedPolicyArns": [
                      "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
                    ]
                  }
                },
                "ec2FastAPIRole": {
                  "Type": "AWS::IAM::Role",
                  "Properties": {
                    "RoleName": "ec2FastAPIRole",
                    "AssumeRolePolicyDocument": {
                      "Version": "2012-10-17",
                      "Statement": [
                        {
                          "Effect": "Allow",
                          "Principal": {
                            "Service": [
                              "ec2.amazonaws.com"
                            ]
                          },
                          "Action": [
                            "sts:AssumeRole"
                          ]
                        }
                      ]
                    },
                    "Policies": [
                      {
                        "PolicyName": "EC2ReadDB",
                        "PolicyDocument": {
                          "Version": "2012-10-17",
                          "Statement": [
                            {
                              "Effect": "Allow",
                              "Action": [
                                "dynamodb:*"
                              ],
                              "Resource": {
                                "Fn::GetAtt": [
                                  "CredentialsTable",
                                  "Arn"
                                ]
                              }
                            }
                          ]
                        }
                      },
                      {
                        "PolicyName": "EC2AccessS3",
                        "PolicyDocument": {
                          "Version": "2012-10-17",
                          "Statement": [
                            {
                              "Effect": "Allow",
                              "Action": [
                                "s3:*"
                              ],
                              "Resource": "*"
                            }
                          ]
                        }
                      }
                    ]
                  }
                },
                "CredentialsTable": "<REDACTED>",
                "FastApiSecurityGroup": {
                  "Type": "AWS::EC2::SecurityGroup",
                  "Properties": {
                    "GroupDescription": "Allow HTTP traffic to FastAPI",
                    "VpcId": {
                      "Ref": "VPC"
                    },
                    "SecurityGroupIngress": [
                      {
                        "IpProtocol": "tcp",
                        "FromPort": 8000,
                        "ToPort": 8000,
                        "CidrIp": "0.0.0.0/0"
                      },
                      {
                        "IpProtocol": "tcp",
                        "FromPort": 22,
                        "ToPort": 22,
                        "CidrIp": "0.0.0.0/0"
                      }
                    ]
                  }
                },
                "InternetGateway": {
                  "Type": "AWS::EC2::InternetGateway",
                  "Properties": {
                    "Tags": [
                      {
                        "Key": "Name",
                        "Value": "MyInternetGateway"
                      }
                    ]
                  }
                },
                "VPCGatewayAttachment": {
                  "Type": "AWS::EC2::VPCGatewayAttachment",
                  "Properties": {
                    "VpcId": {
                      "Ref": "VPC"
                    },
                    "InternetGatewayId": {
                      "Ref": "InternetGateway"
                    }
                  }
                },
                "PublicRouteTable": {
                  "Type": "AWS::EC2::RouteTable",
                  "Properties": {
                    "VpcId": {
                      "Ref": "VPC"
                    },
                    "Tags": [
                      {
                        "Key": "Name",
                        "Value": "PublicRouteTable"
                      }
                    ]
                  }
                },
                "SubnetRouteTableAssociation": {
                  "Type": "AWS::EC2::SubnetRouteTableAssociation",
                  "Properties": {
                    "SubnetId": {
                      "Ref": "PublicSubnet"
                    },
                    "RouteTableId": {
                      "Ref": "PublicRouteTable"
                    }
                  }
                },
                "DefaultRoute": {
                  "Type": "AWS::EC2::Route",
                  "Properties": {
                    "RouteTableId": {
                      "Ref": "PublicRouteTable"
                    },
                    "DestinationCidrBlock": "0.0.0.0/0",
                    "GatewayId": {
                      "Ref": "InternetGateway"
                    }
                  }
                },
                "EC2KeyPair": {
                  "Type": "AWS::EC2::KeyPair",
                  "Properties": {
                    "KeyName": "EC2KeyPairFASTAPI"
                  }
                },
                "FastApiInstance": {
                  "Type": "AWS::EC2::Instance",
                  "Properties": {
                    "InstanceType": "t2.micro",
                    "KeyName": {
                      "Ref": "EC2KeyPair"
                    },
                    "ImageId": "ami-0c80e2b6ccb9ad6d1",
                    "SecurityGroupIds": [
                      {
                        "Ref": "FastApiSecurityGroup"
                      }
                    ],
                    "SubnetId": {
                      "Ref": "PublicSubnet"
                    },
                    "Tags": [
                      {
                        "Key": "Name",
                        "Value": "FastApiEC2Instance"
                      }
                    ],
                    "UserData": {
                      "Fn::Base64": {
                        "Fn::Sub": "#!/bin/bash\nyum update -y\ncd /home/ec2-user\nmkdir app\naws s3 cp s3://pwnd-s3-bucket-creator-prod-pwndec2codebucket-irxvs9luvtna /home/ec2-user/app --recursive\ncd app\necho \"Credentials-Table-us-east-2\" > db_name.txt\nsudo yum install -y python3-pip\npip3 install fastapi uvicorn boto3\nnohup uvicorn app:app --host 0.0.0.0 --port 8000 > /home/ec2-user/app/server.log 2>&1 &\n"
                      }
                    },
                    "IamInstanceProfile": {
                      "Ref": "Ec2InstanceProfile"
                    },
                    "Role": null
                  }
                },
                "Ec2InstanceProfile": {
                  "Type": "AWS::IAM::InstanceProfile",
                  "Properties": {
                    "Path": "/",
                    "Roles": [
                      {
                        "Ref": "ec2FastAPIRole"
                      }
                    ]
                  }
                },
                "EC2InstancePublicIP": {
                  "Type": "AWS::EC2::EIP",
                  "Properties": {
                    "InstanceId": {
                      "Ref": "FastApiInstance"
                    }
                  }
                },
                "PublicSubnet": {
                  "Type": "AWS::EC2::Subnet",
                  "Properties": {
                    "VpcId": {
                      "Ref": "VPC"
                    },
                    "CidrBlock": "10.0.1.0/24",
                    "MapPublicIpOnLaunch": true,
                    "AvailabilityZone": "us-east-2a"
                  }
                },
                "VPC": {
                  "Type": "AWS::EC2::VPC",
                  "Properties": {
                    "CidrBlock": "10.0.0.0/16",
                    "EnableDnsSupport": true,
                    "EnableDnsHostnames": true
                  }
                }
              },
              "Outputs": {}
            },
            "custom": {
              "region": "us-east-2",
              "ec2InstanceUri": {
                "Fn::Sub": "http://${EC2InstancePublicIP}:8000/query"
              },
              "tableName": "Credentials-Table-us-east-2"
            },
            "plugins": [
              "serverless-python-requirements"
            ]
          },
          "configFileDirPath": "/home/jacob/Documents/SpyCloud Code Challenge/pwnd-backend",
          "config": {
            "type": "sls"
          },
          "options": {
            "param": [
              "dataBucketName=pwnd-s3-bucket-creator-prod-pwndrawdatabucket-vysphgm2oxcn",
              "codeBucketName=pwnd-s3-bucket-creator-prod-pwndec2codebucket-irxvs9luvtna"
            ]
          },
          "stage": "prod",
          "dashboard": null,
          "logger": {
            "namespace": "s:core:resolver:sls",
            "prefix": null,
            "prefixColor": null
          },
          "_credentialsPromise": "<REDACTED>"
        },
        "resolvers": {}
      }
    },
    "composeServiceName": null,
    "servicePath": "/home/jacob/Documents/SpyCloud Code Challenge/pwnd-backend",
    "serviceConfigFileName": "serverless.yml",
    "service": {
      "service": "Pwnd-Backend",
      "provider": {
        "name": "aws",
        "runtime": "python3.10",
        "region": "us-east-2",
        "stage": "prod",
        "environment": {
          "CREDS_TABLE": {
            "Ref": "CredentialsTable"
          }
        },
        "iam": {
          "role": "lambdaProcessRole"
        },
        "versionFunctions": true,
        "compiledCloudFormationTemplate": {
          "AWSTemplateFormatVersion": "2010-09-09",
          "Description": "The AWS CloudFormation template for this Serverless application",
          "Resources": {
            "IngestUnderscoredataLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/Pwnd-Backend-prod-ingest_data"
              }
            },
            "ProxyLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/Pwnd-Backend-prod-proxy"
              }
            },
            "IngestUnderscoredataLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "serverless-framework-deployments-us-east-2-892f4b5c-f3a5",
                  "S3Key": "serverless/Pwnd-Backend/prod/1733213700634-2024-12-03T08:15:00.634Z/Pwnd-Backend.zip"
                },
                "Handler": "lambdas/ingest_data.lambda_handler",
                "Runtime": "python3.10",
                "FunctionName": "Pwnd-Backend-prod-ingest_data",
                "MemorySize": 1024,
                "Timeout": 500,
                "Environment": {
                  "Variables": {
                    "CREDS_TABLE": {
                      "Ref": "CredentialsTable"
                    }
                  }
                },
                "Role": {
                  "Fn::GetAtt": [
                    "lambdaProcessRole",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "IngestUnderscoredataLogGroup",
                "lambdaProcessRole"
              ]
            },
            "ProxyLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "serverless-framework-deployments-us-east-2-892f4b5c-f3a5",
                  "S3Key": "serverless/Pwnd-Backend/prod/1733213700634-2024-12-03T08:15:00.634Z/Pwnd-Backend.zip"
                },
                "Handler": "handler.dummy",
                "Runtime": "python3.10",
                "FunctionName": "Pwnd-Backend-prod-proxy",
                "MemorySize": 1024,
                "Timeout": 6,
                "Environment": {
                  "Variables": {
                    "CREDS_TABLE": {
                      "Ref": "CredentialsTable"
                    }
                  }
                },
                "Role": {
                  "Fn::GetAtt": [
                    "lambdaProcessRole",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "ProxyLogGroup",
                "lambdaProcessRole"
              ]
            },
            "IngestUnderscoredataLambdaVersionA0BnlAE0NIFtKZXwZysr13aFMg2SElMXZOBhk7Rvao": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "IngestUnderscoredataLambdaFunction"
                },
                "CodeSha256": "9c/g9URdJ2F/9SmwPUN0D5XTXmJNfIsHmAxEx49hVUg="
              }
            },
            "ProxyLambdaVersionkaxR7pj0IuQcHjZfYXbTyltQDLZbyjdbZbC6PBMH8ic": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "ProxyLambdaFunction"
                },
                "CodeSha256": "9c/g9URdJ2F/9SmwPUN0D5XTXmJNfIsHmAxEx49hVUg="
              }
            },
            "IngestUnderscoredataCustomS31": {
              "Type": "Custom::S3",
              "Version": "1.0",
              "DependsOn": [
                "IngestUnderscoredataLambdaFunction",
                "CustomDashresourceDashexistingDashs3LambdaFunction"
              ],
              "Properties": {
                "ServiceToken": "<REDACTED>",
                "FunctionName": "Pwnd-Backend-prod-ingest_data",
                "BucketName": "pwnd-s3-bucket-creator-prod-pwndrawdatabucket-vysphgm2oxcn",
                "BucketConfigs": [
                  {
                    "Event": "s3:ObjectCreated:*",
                    "Rules": [
                      {
                        "Prefix": "uploads/"
                      }
                    ]
                  }
                ]
              }
            },
            "IamRoleCustomResourcesLambdaExecution": {
              "Type": "AWS::IAM::Role",
              "Properties": {
                "AssumeRolePolicyDocument": {
                  "Version": "2012-10-17",
                  "Statement": [
                    {
                      "Effect": "Allow",
                      "Principal": {
                        "Service": [
                          "lambda.amazonaws.com"
                        ]
                      },
                      "Action": [
                        "sts:AssumeRole"
                      ]
                    }
                  ]
                },
                "Policies": [
                  {
                    "PolicyName": {
                      "Fn::Join": [
                        "-",
                        [
                          "prod",
                          "Pwnd-Backend",
                          "custom-resources-lambda"
                        ]
                      ]
                    },
                    "PolicyDocument": {
                      "Version": "2012-10-17",
                      "Statement": [
                        {
                          "Effect": "Allow",
                          "Action": [
                            "logs:CreateLogStream",
                            "logs:CreateLogGroup",
                            "logs:TagResource"
                          ],
                          "Resource": [
                            {
                              "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/Pwnd-Backend-prod*:*"
                            }
                          ]
                        },
                        {
                          "Effect": "Allow",
                          "Action": [
                            "logs:PutLogEvents"
                          ],
                          "Resource": [
                            {
                              "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/Pwnd-Backend-prod*:*:*"
                            }
                          ]
                        },
                        {
                          "Effect": "Allow",
                          "Resource": {
                            "Fn::Join": [
                              ":",
                              [
                                "arn",
                                {
                                  "Ref": "AWS::Partition"
                                },
                                "s3",
                                "",
                                "",
                                "pwnd-s3-bucket-creator-prod-pwndrawdatabucket-vysphgm2oxcn"
                              ]
                            ]
                          },
                          "Action": [
                            "s3:PutBucketNotification",
                            "s3:GetBucketNotification"
                          ]
                        },
                        {
                          "Effect": "Allow",
                          "Resource": {
                            "Fn::Join": [
                              ":",
                              [
                                "arn",
                                {
                                  "Ref": "AWS::Partition"
                                },
                                "lambda",
                                {
                                  "Ref": "AWS::Region"
                                },
                                {
                                  "Ref": "AWS::AccountId"
                                },
                                "function",
                                "*"
                              ]
                            ]
                          },
                          "Action": [
                            "lambda:AddPermission",
                            "lambda:RemovePermission"
                          ]
                        }
                      ]
                    }
                  }
                ]
              }
            },
            "CustomDashresourceDashexistingDashs3LambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "serverless-framework-deployments-us-east-2-892f4b5c-f3a5",
                  "S3Key": "serverless/Pwnd-Backend/prod/1733213700634-2024-12-03T08:15:00.634Z/custom-resources.zip"
                },
                "FunctionName": "Pwnd-Backend-prod-custom-resource-existing-s3",
                "Handler": "s3/handler.handler",
                "MemorySize": 1024,
                "Runtime": "nodejs20.x",
                "Timeout": 180,
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleCustomResourcesLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "IamRoleCustomResourcesLambdaExecution",
                "CustomDashresourceDashexistingDashs3LogGroup"
              ]
            },
            "CustomDashresourceDashexistingDashs3LogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/Pwnd-Backend-prod-custom-resource-existing-s3"
              }
            },
            "ApiGatewayRestApi": {
              "Type": "AWS::ApiGateway::RestApi",
              "Properties": {
                "Name": "prod-Pwnd-Backend",
                "EndpointConfiguration": {
                  "Types": [
                    "EDGE"
                  ]
                },
                "Policy": ""
              }
            },
            "ApiGatewayResourceQuery": {
              "Type": "AWS::ApiGateway::Resource",
              "Properties": {
                "ParentId": {
                  "Fn::GetAtt": [
                    "ApiGatewayRestApi",
                    "RootResourceId"
                  ]
                },
                "PathPart": "query",
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayMethodQueryOptions": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "AuthorizationType": "NONE",
                "HttpMethod": "OPTIONS",
                "MethodResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": true,
                      "method.response.header.Access-Control-Allow-Headers": true,
                      "method.response.header.Access-Control-Allow-Methods": true
                    },
                    "ResponseModels": {}
                  }
                ],
                "RequestParameters": {},
                "Integration": {
                  "Type": "MOCK",
                  "RequestTemplates": {
                    "application/json": "{statusCode:200}"
                  },
                  "ContentHandling": "CONVERT_TO_TEXT",
                  "IntegrationResponses": [
                    {
                      "StatusCode": "200",
                      "ResponseParameters": {
                        "method.response.header.Access-Control-Allow-Origin": "'*'",
                        "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                        "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'"
                      },
                      "ResponseTemplates": {
                        "application/json": ""
                      }
                    }
                  ]
                },
                "ResourceId": {
                  "Ref": "ApiGatewayResourceQuery"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayMethodQueryGet": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "HttpMethod": "GET",
                "RequestParameters": {},
                "ResourceId": {
                  "Ref": "ApiGatewayResourceQuery"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                },
                "ApiKeyRequired": "<REDACTED>",
                "AuthorizationType": "NONE",
                "Integration": {
                  "IntegrationHttpMethod": "GET",
                  "Type": "HTTP_PROXY",
                  "Uri": {
                    "Fn::Sub": "http://${EC2InstancePublicIP}:8000/query"
                  }
                },
                "MethodResponses": []
              },
              "DependsOn": [
                "ProxyLambdaPermissionApiGateway"
              ]
            },
            "ApiGatewayDeployment1733213678436": {
              "Type": "AWS::ApiGateway::Deployment",
              "Properties": {
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                },
                "StageName": "prod"
              },
              "DependsOn": [
                "ApiGatewayMethodQueryOptions",
                "ApiGatewayMethodQueryGet"
              ]
            },
            "ProxyLambdaPermissionApiGateway": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "ProxyLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "/*/*"
                    ]
                  ]
                }
              }
            },
            "lambdaProcessRole": {
              "Type": "AWS::IAM::Role",
              "Properties": {
                "RoleName": "lambdaDataProcessRole",
                "AssumeRolePolicyDocument": {
                  "Version": "2012-10-17",
                  "Statement": [
                    {
                      "Effect": "Allow",
                      "Principal": {
                        "Service": [
                          "lambda.amazonaws.com"
                        ]
                      },
                      "Action": [
                        "sts:AssumeRole"
                      ]
                    }
                  ]
                },
                "Policies": [
                  {
                    "PolicyName": "CredsTablePolicy",
                    "PolicyDocument": {
                      "Version": "2012-10-17",
                      "Statement": [
                        {
                          "Effect": "Allow",
                          "Action": [
                            "dynamodb:*"
                          ],
                          "Resource": {
                            "Fn::GetAtt": [
                              "CredentialsTable",
                              "Arn"
                            ]
                          }
                        }
                      ]
                    }
                  },
                  {
                    "PolicyName": "s3Policy",
                    "PolicyDocument": {
                      "Version": "2012-10-17",
                      "Statement": [
                        {
                          "Effect": "Allow",
                          "Action": [
                            "s3:*"
                          ],
                          "Resource": "*"
                        }
                      ]
                    }
                  }
                ],
                "ManagedPolicyArns": [
                  "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
                ]
              }
            },
            "ec2FastAPIRole": {
              "Type": "AWS::IAM::Role",
              "Properties": {
                "RoleName": "ec2FastAPIRole",
                "AssumeRolePolicyDocument": {
                  "Version": "2012-10-17",
                  "Statement": [
                    {
                      "Effect": "Allow",
                      "Principal": {
                        "Service": [
                          "ec2.amazonaws.com"
                        ]
                      },
                      "Action": [
                        "sts:AssumeRole"
                      ]
                    }
                  ]
                },
                "Policies": [
                  {
                    "PolicyName": "EC2ReadDB",
                    "PolicyDocument": {
                      "Version": "2012-10-17",
                      "Statement": [
                        {
                          "Effect": "Allow",
                          "Action": [
                            "dynamodb:*"
                          ],
                          "Resource": {
                            "Fn::GetAtt": [
                              "CredentialsTable",
                              "Arn"
                            ]
                          }
                        }
                      ]
                    }
                  },
                  {
                    "PolicyName": "EC2AccessS3",
                    "PolicyDocument": {
                      "Version": "2012-10-17",
                      "Statement": [
                        {
                          "Effect": "Allow",
                          "Action": [
                            "s3:*"
                          ],
                          "Resource": "*"
                        }
                      ]
                    }
                  }
                ]
              }
            },
            "CredentialsTable": "<REDACTED>",
            "FastApiSecurityGroup": {
              "Type": "AWS::EC2::SecurityGroup",
              "Properties": {
                "GroupDescription": "Allow HTTP traffic to FastAPI",
                "VpcId": {
                  "Ref": "VPC"
                },
                "SecurityGroupIngress": [
                  {
                    "IpProtocol": "tcp",
                    "FromPort": 8000,
                    "ToPort": 8000,
                    "CidrIp": "0.0.0.0/0"
                  },
                  {
                    "IpProtocol": "tcp",
                    "FromPort": 22,
                    "ToPort": 22,
                    "CidrIp": "0.0.0.0/0"
                  }
                ]
              }
            },
            "InternetGateway": {
              "Type": "AWS::EC2::InternetGateway",
              "Properties": {
                "Tags": [
                  {
                    "Key": "Name",
                    "Value": "MyInternetGateway"
                  }
                ]
              }
            },
            "VPCGatewayAttachment": {
              "Type": "AWS::EC2::VPCGatewayAttachment",
              "Properties": {
                "VpcId": {
                  "Ref": "VPC"
                },
                "InternetGatewayId": {
                  "Ref": "InternetGateway"
                }
              }
            },
            "PublicRouteTable": {
              "Type": "AWS::EC2::RouteTable",
              "Properties": {
                "VpcId": {
                  "Ref": "VPC"
                },
                "Tags": [
                  {
                    "Key": "Name",
                    "Value": "PublicRouteTable"
                  }
                ]
              }
            },
            "SubnetRouteTableAssociation": {
              "Type": "AWS::EC2::SubnetRouteTableAssociation",
              "Properties": {
                "SubnetId": {
                  "Ref": "PublicSubnet"
                },
                "RouteTableId": {
                  "Ref": "PublicRouteTable"
                }
              }
            },
            "DefaultRoute": {
              "Type": "AWS::EC2::Route",
              "Properties": {
                "RouteTableId": {
                  "Ref": "PublicRouteTable"
                },
                "DestinationCidrBlock": "0.0.0.0/0",
                "GatewayId": {
                  "Ref": "InternetGateway"
                }
              }
            },
            "EC2KeyPair": {
              "Type": "AWS::EC2::KeyPair",
              "Properties": {
                "KeyName": "EC2KeyPairFASTAPI"
              }
            },
            "FastApiInstance": {
              "Type": "AWS::EC2::Instance",
              "Properties": {
                "InstanceType": "t2.micro",
                "KeyName": {
                  "Ref": "EC2KeyPair"
                },
                "ImageId": "ami-0c80e2b6ccb9ad6d1",
                "SecurityGroupIds": [
                  {
                    "Ref": "FastApiSecurityGroup"
                  }
                ],
                "SubnetId": {
                  "Ref": "PublicSubnet"
                },
                "Tags": [
                  {
                    "Key": "Name",
                    "Value": "FastApiEC2Instance"
                  }
                ],
                "UserData": {
                  "Fn::Base64": {
                    "Fn::Sub": "#!/bin/bash\nyum update -y\ncd /home/ec2-user\nmkdir app\naws s3 cp s3://pwnd-s3-bucket-creator-prod-pwndec2codebucket-irxvs9luvtna /home/ec2-user/app --recursive\ncd app\necho \"Credentials-Table-us-east-2\" > db_name.txt\nsudo yum install -y python3-pip\npip3 install fastapi uvicorn boto3\nnohup uvicorn app:app --host 0.0.0.0 --port 8000 > /home/ec2-user/app/server.log 2>&1 &\n"
                  }
                },
                "IamInstanceProfile": {
                  "Ref": "Ec2InstanceProfile"
                }
              }
            },
            "Ec2InstanceProfile": {
              "Type": "AWS::IAM::InstanceProfile",
              "Properties": {
                "Path": "/",
                "Roles": [
                  {
                    "Ref": "ec2FastAPIRole"
                  }
                ]
              }
            },
            "EC2InstancePublicIP": {
              "Type": "AWS::EC2::EIP",
              "Properties": {
                "InstanceId": {
                  "Ref": "FastApiInstance"
                }
              }
            },
            "PublicSubnet": {
              "Type": "AWS::EC2::Subnet",
              "Properties": {
                "VpcId": {
                  "Ref": "VPC"
                },
                "CidrBlock": "10.0.1.0/24",
                "MapPublicIpOnLaunch": true,
                "AvailabilityZone": "us-east-2a"
              }
            },
            "VPC": {
              "Type": "AWS::EC2::VPC",
              "Properties": {
                "CidrBlock": "10.0.0.0/16",
                "EnableDnsSupport": true,
                "EnableDnsHostnames": true
              }
            }
          },
          "Outputs": {
            "ServerlessDeploymentBucketName": {
              "Value": "serverless-framework-deployments-us-east-2-892f4b5c-f3a5",
              "Export": {
                "Name": "sls-Pwnd-Backend-prod-ServerlessDeploymentBucketName"
              }
            },
            "IngestUnderscoredataLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "IngestUnderscoredataLambdaVersionA0BnlAE0NIFtKZXwZysr13aFMg2SElMXZOBhk7Rvao"
              },
              "Export": {
                "Name": "sls-Pwnd-Backend-prod-IngestUnderscoredataLambdaFunctionQualifiedArn"
              }
            },
            "ProxyLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "ProxyLambdaVersionkaxR7pj0IuQcHjZfYXbTyltQDLZbyjdbZbC6PBMH8ic"
              },
              "Export": {
                "Name": "sls-Pwnd-Backend-prod-ProxyLambdaFunctionQualifiedArn"
              }
            },
            "ServiceEndpoint": {
              "Description": "URL of the service endpoint",
              "Value": {
                "Fn::Join": [
                  "",
                  [
                    "https://",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    ".execute-api.",
                    {
                      "Ref": "AWS::Region"
                    },
                    ".",
                    {
                      "Ref": "AWS::URLSuffix"
                    },
                    "/prod"
                  ]
                ]
              },
              "Export": {
                "Name": "sls-Pwnd-Backend-prod-ServiceEndpoint"
              }
            }
          }
        },
        "vpc": {}
      },
      "functions": {
        "ingest_data": {
          "handler": "lambdas/ingest_data.lambda_handler",
          "timeout": 500,
          "events": [
            {
              "s3": {
                "bucket": "pwnd-s3-bucket-creator-prod-pwndrawdatabucket-vysphgm2oxcn",
                "event": "s3:ObjectCreated:*",
                "rules": [
                  {
                    "prefix": "uploads/"
                  }
                ],
                "existing": true
              }
            }
          ],
          "name": "Pwnd-Backend-prod-ingest_data",
          "package": {},
          "memory": 1024,
          "runtime": "python3.10",
          "vpc": {},
          "versionLogicalId": "IngestUnderscoredataLambdaVersionA0BnlAE0NIFtKZXwZysr13aFMg2SElMXZOBhk7Rvao"
        },
        "proxy": {
          "handler": "handler.dummy",
          "events": [
            {
              "http": {
                "path": "query",
                "method": "get",
                "integration": "HTTP_PROXY",
                "cors": {
                  "origin": "*",
                  "methods": [
                    "OPTIONS",
                    "GET"
                  ],
                  "headers": [
                    "Content-Type",
                    "X-Amz-Date",
                    "Authorization",
                    "X-Api-Key",
                    "X-Amz-Security-Token",
                    "X-Amz-User-Agent",
                    "X-Amzn-Trace-Id"
                  ],
                  "allowCredentials": "<REDACTED>"
                },
                "request": {
                  "uri": {
                    "Fn::Sub": "http://${EC2InstancePublicIP}:8000/query"
                  }
                },
                "connectionType": null
              }
            }
          ],
          "name": "Pwnd-Backend-prod-proxy",
          "package": {},
          "memory": 1024,
          "timeout": 6,
          "runtime": "python3.10",
          "vpc": {},
          "versionLogicalId": "ProxyLambdaVersionkaxR7pj0IuQcHjZfYXbTyltQDLZbyjdbZbC6PBMH8ic"
        }
      },
      "resources": {
        "Resources": {
          "lambdaProcessRole": {
            "Type": "AWS::IAM::Role",
            "Properties": {
              "RoleName": "lambdaDataProcessRole",
              "AssumeRolePolicyDocument": {
                "Version": "2012-10-17",
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Principal": {
                      "Service": [
                        "lambda.amazonaws.com"
                      ]
                    },
                    "Action": [
                      "sts:AssumeRole"
                    ]
                  }
                ]
              },
              "Policies": [
                {
                  "PolicyName": "CredsTablePolicy",
                  "PolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                      {
                        "Effect": "Allow",
                        "Action": [
                          "dynamodb:*"
                        ],
                        "Resource": {
                          "Fn::GetAtt": [
                            "CredentialsTable",
                            "Arn"
                          ]
                        }
                      }
                    ]
                  }
                },
                {
                  "PolicyName": "s3Policy",
                  "PolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                      {
                        "Effect": "Allow",
                        "Action": [
                          "s3:*"
                        ],
                        "Resource": "*"
                      }
                    ]
                  }
                }
              ],
              "ManagedPolicyArns": [
                "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
              ]
            }
          },
          "ec2FastAPIRole": {
            "Type": "AWS::IAM::Role",
            "Properties": {
              "RoleName": "ec2FastAPIRole",
              "AssumeRolePolicyDocument": {
                "Version": "2012-10-17",
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Principal": {
                      "Service": [
                        "ec2.amazonaws.com"
                      ]
                    },
                    "Action": [
                      "sts:AssumeRole"
                    ]
                  }
                ]
              },
              "Policies": [
                {
                  "PolicyName": "EC2ReadDB",
                  "PolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                      {
                        "Effect": "Allow",
                        "Action": [
                          "dynamodb:*"
                        ],
                        "Resource": {
                          "Fn::GetAtt": [
                            "CredentialsTable",
                            "Arn"
                          ]
                        }
                      }
                    ]
                  }
                },
                {
                  "PolicyName": "EC2AccessS3",
                  "PolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                      {
                        "Effect": "Allow",
                        "Action": [
                          "s3:*"
                        ],
                        "Resource": "*"
                      }
                    ]
                  }
                }
              ]
            }
          },
          "CredentialsTable": "<REDACTED>",
          "FastApiSecurityGroup": {
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
              "GroupDescription": "Allow HTTP traffic to FastAPI",
              "VpcId": {
                "Ref": "VPC"
              },
              "SecurityGroupIngress": [
                {
                  "IpProtocol": "tcp",
                  "FromPort": 8000,
                  "ToPort": 8000,
                  "CidrIp": "0.0.0.0/0"
                },
                {
                  "IpProtocol": "tcp",
                  "FromPort": 22,
                  "ToPort": 22,
                  "CidrIp": "0.0.0.0/0"
                }
              ]
            }
          },
          "InternetGateway": {
            "Type": "AWS::EC2::InternetGateway",
            "Properties": {
              "Tags": [
                {
                  "Key": "Name",
                  "Value": "MyInternetGateway"
                }
              ]
            }
          },
          "VPCGatewayAttachment": {
            "Type": "AWS::EC2::VPCGatewayAttachment",
            "Properties": {
              "VpcId": {
                "Ref": "VPC"
              },
              "InternetGatewayId": {
                "Ref": "InternetGateway"
              }
            }
          },
          "PublicRouteTable": {
            "Type": "AWS::EC2::RouteTable",
            "Properties": {
              "VpcId": {
                "Ref": "VPC"
              },
              "Tags": [
                {
                  "Key": "Name",
                  "Value": "PublicRouteTable"
                }
              ]
            }
          },
          "SubnetRouteTableAssociation": {
            "Type": "AWS::EC2::SubnetRouteTableAssociation",
            "Properties": {
              "SubnetId": {
                "Ref": "PublicSubnet"
              },
              "RouteTableId": {
                "Ref": "PublicRouteTable"
              }
            }
          },
          "DefaultRoute": {
            "Type": "AWS::EC2::Route",
            "Properties": {
              "RouteTableId": {
                "Ref": "PublicRouteTable"
              },
              "DestinationCidrBlock": "0.0.0.0/0",
              "GatewayId": {
                "Ref": "InternetGateway"
              }
            }
          },
          "EC2KeyPair": {
            "Type": "AWS::EC2::KeyPair",
            "Properties": {
              "KeyName": "EC2KeyPairFASTAPI"
            }
          },
          "FastApiInstance": {
            "Type": "AWS::EC2::Instance",
            "Properties": {
              "InstanceType": "t2.micro",
              "KeyName": {
                "Ref": "EC2KeyPair"
              },
              "ImageId": "ami-0c80e2b6ccb9ad6d1",
              "SecurityGroupIds": [
                {
                  "Ref": "FastApiSecurityGroup"
                }
              ],
              "SubnetId": {
                "Ref": "PublicSubnet"
              },
              "Tags": [
                {
                  "Key": "Name",
                  "Value": "FastApiEC2Instance"
                }
              ],
              "UserData": {
                "Fn::Base64": {
                  "Fn::Sub": "#!/bin/bash\nyum update -y\ncd /home/ec2-user\nmkdir app\naws s3 cp s3://pwnd-s3-bucket-creator-prod-pwndec2codebucket-irxvs9luvtna /home/ec2-user/app --recursive\ncd app\necho \"Credentials-Table-us-east-2\" > db_name.txt\nsudo yum install -y python3-pip\npip3 install fastapi uvicorn boto3\nnohup uvicorn app:app --host 0.0.0.0 --port 8000 > /home/ec2-user/app/server.log 2>&1 &\n"
                }
              },
              "IamInstanceProfile": {
                "Ref": "Ec2InstanceProfile"
              },
              "Role": null
            }
          },
          "Ec2InstanceProfile": {
            "Type": "AWS::IAM::InstanceProfile",
            "Properties": {
              "Path": "/",
              "Roles": [
                {
                  "Ref": "ec2FastAPIRole"
                }
              ]
            }
          },
          "EC2InstancePublicIP": {
            "Type": "AWS::EC2::EIP",
            "Properties": {
              "InstanceId": {
                "Ref": "FastApiInstance"
              }
            }
          },
          "PublicSubnet": {
            "Type": "AWS::EC2::Subnet",
            "Properties": {
              "VpcId": {
                "Ref": "VPC"
              },
              "CidrBlock": "10.0.1.0/24",
              "MapPublicIpOnLaunch": true,
              "AvailabilityZone": "us-east-2a"
            }
          },
          "VPC": {
            "Type": "AWS::EC2::VPC",
            "Properties": {
              "CidrBlock": "10.0.0.0/16",
              "EnableDnsSupport": true,
              "EnableDnsHostnames": true
            }
          }
        },
        "Outputs": {}
      },
      "custom": {
        "region": "us-east-2",
        "ec2InstanceUri": {
          "Fn::Sub": "http://${EC2InstancePublicIP}:8000/query"
        },
        "tableName": "Credentials-Table-us-east-2"
      },
      "plugins": [
        "serverless-python-requirements"
      ]
    },
    "serviceRawFile": "service: Pwnd-Backend\n\nprovider:\n  name: aws\n  runtime: python3.10\n  region: us-east-2\n  stage: prod\n\n  environment:\n    CREDS_TABLE: !Ref CredentialsTable\n  iam:\n    role: lambdaProcessRole\n\nfunctions:\n  ingest_data:\n    handler: lambdas/ingest_data.lambda_handler\n    timeout: 500\n    events:\n      - s3:\n          bucket: ${param:dataBucketName} # Replace with your bucket name\n          event: s3:ObjectCreated:* # Trigger for object creation\n          rules:\n            - prefix: uploads/ # Optional: Only triggers for files in this path\n          existing: true\n  proxy:\n    handler: handler.dummy # Dummy handler, used for the HTTP Proxy integration\n    events:\n      - http:\n          path: /query\n          method: GET\n          integration: http-proxy\n          cors: true\n          request:\n            uri: ${self:custom.ec2InstanceUri} # Proxy all paths\n\nresources:\n  Resources:\n    lambdaProcessRole:\n      Type: AWS::IAM::Role\n      Properties:\n        RoleName: lambdaDataProcessRole\n        AssumeRolePolicyDocument:\n          Version: \"2012-10-17\"\n          Statement:\n            - Effect: \"Allow\"\n              Principal:\n                Service:\n                  - \"lambda.amazonaws.com\"\n              Action:\n                - \"sts:AssumeRole\"\n        Policies:\n          - PolicyName: CredsTablePolicy\n            PolicyDocument:\n              Version: \"2012-10-17\"\n              Statement:\n                - Effect: Allow\n                  Action:\n                    - dynamodb:*\n                  Resource: !GetAtt CredentialsTable.Arn\n          - PolicyName: s3Policy\n            PolicyDocument:\n              Version: \"2012-10-17\"\n              Statement:\n                - Effect: Allow\n                  Action:\n                    - \"s3:*\"\n                  Resource: \"*\"\n\n        ManagedPolicyArns:\n          - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole\n    ec2FastAPIRole:\n      Type: AWS::IAM::Role\n      Properties:\n        RoleName: ec2FastAPIRole\n        AssumeRolePolicyDocument:\n          Version: \"2012-10-17\"\n          Statement:\n            - Effect: \"Allow\"\n              Principal:\n                Service:\n                  - ec2.amazonaws.com\n              Action:\n                - \"sts:AssumeRole\"\n        Policies:\n          - PolicyName: EC2ReadDB\n            PolicyDocument:\n              Version: \"2012-10-17\"\n              Statement:\n                - Effect: Allow\n                  Action:\n                    - dynamodb:*\n                  Resource: !GetAtt CredentialsTable.Arn\n          - PolicyName: EC2AccessS3\n            PolicyDocument:\n              Version: \"2012-10-17\"\n              Statement:\n                - Effect: Allow\n                  Action:\n                    - s3:*\n                  Resource: \"*\"\n\n    CredentialsTable:\n      Type: \"AWS::DynamoDB::GlobalTable\"\n      Properties:\n        AttributeDefinitions:\n          - AttributeName: email\n            AttributeType: S\n          - AttributeName: domain\n            AttributeType: S\n        KeySchema:\n          - AttributeName: email\n            KeyType: HASH\n        GlobalSecondaryIndexes:\n          - IndexName: domain-index\n            KeySchema:\n              - AttributeName: domain\n                KeyType: HASH\n            Projection:\n              ProjectionType: ALL\n        Replicas:\n          - Region: ${self:custom.region}\n        BillingMode: PAY_PER_REQUEST\n        TableName: ${self:custom.tableName}\n\n    FastApiSecurityGroup:\n      Type: AWS::EC2::SecurityGroup\n      Properties:\n        GroupDescription: Allow HTTP traffic to FastAPI\n        VpcId: !Ref VPC # Attach to the default VPC\n        SecurityGroupIngress:\n          - IpProtocol: tcp\n            FromPort: 8000\n            ToPort: 8000\n            CidrIp: 0.0.0.0/0 # Open to the world (restrict this in production)\n          - IpProtocol: tcp\n            FromPort: 22\n            ToPort: 22\n            CidrIp: 0.0.0.0/0 # Open to the world (restrict this in production)\n    InternetGateway:\n      Type: AWS::EC2::InternetGateway\n      Properties:\n        Tags:\n          - Key: Name\n            Value: MyInternetGateway\n\n    # Attach Internet Gateway to VPC\n    VPCGatewayAttachment:\n      Type: AWS::EC2::VPCGatewayAttachment\n      Properties:\n        VpcId: !Ref VPC\n        InternetGatewayId: !Ref InternetGateway\n\n    PublicRouteTable:\n      Type: AWS::EC2::RouteTable\n      Properties:\n        VpcId: !Ref VPC\n        Tags:\n          - Key: Name\n            Value: PublicRouteTable\n\n    SubnetRouteTableAssociation:\n      Type: AWS::EC2::SubnetRouteTableAssociation\n      Properties:\n        SubnetId: !Ref PublicSubnet\n        RouteTableId: !Ref PublicRouteTable\n\n    DefaultRoute:\n      Type: AWS::EC2::Route\n      Properties:\n        RouteTableId: !Ref PublicRouteTable\n        DestinationCidrBlock: 0.0.0.0/0\n        GatewayId: !Ref InternetGateway\n\n    EC2KeyPair:\n      Type: AWS::EC2::KeyPair\n      Properties:\n        KeyName: EC2KeyPairFASTAPI\n\n    # EC2 Instance\n    FastApiInstance:\n      Type: AWS::EC2::Instance\n      Properties:\n        InstanceType: t2.micro # free tier ec2 instance\n        KeyName: !Ref EC2KeyPair\n        ImageId: ami-0c80e2b6ccb9ad6d1\n        Role:\n        SecurityGroupIds:\n          - !Ref FastApiSecurityGroup\n        SubnetId: !Ref PublicSubnet # Reference to a public subnet\n        Tags:\n          - Key: Name\n            Value: FastApiEC2Instance\n        UserData:\n          Fn::Base64: !Sub |\n            #!/bin/bash\n            yum update -y\n            cd /home/ec2-user\n            mkdir app\n            aws s3 cp s3://${param:codeBucketName} /home/ec2-user/app --recursive\n            cd app\n            echo \"${self:custom.tableName}\" > db_name.txt\n            sudo yum install -y python3-pip\n            pip3 install fastapi uvicorn boto3\n            nohup uvicorn app:app --host 0.0.0.0 --port 8000 > /home/ec2-user/app/server.log 2>&1 &\n\n        IamInstanceProfile: !Ref Ec2InstanceProfile\n    Ec2InstanceProfile:\n      Type: \"AWS::IAM::InstanceProfile\"\n      Properties:\n        Path: /\n        Roles:\n          - !Ref ec2FastAPIRole\n\n    # Outputs for EC2 Public IP\n    EC2InstancePublicIP:\n      Type: AWS::EC2::EIP\n      Properties:\n        InstanceId: !Ref FastApiInstance\n\n    # Subnet for the EC2 Instance\n    PublicSubnet:\n      Type: AWS::EC2::Subnet\n      Properties:\n        VpcId: !Ref VPC\n        CidrBlock: 10.0.1.0/24\n        MapPublicIpOnLaunch: true\n        AvailabilityZone: us-east-2a\n    VPC:\n      Type: AWS::EC2::VPC\n      Properties:\n        CidrBlock: 10.0.0.0/16\n        EnableDnsSupport: true\n        EnableDnsHostnames: true\n\ncustom:\n  region: \"us-east-2\"\n  ec2InstanceUri: !Sub \"http://${EC2InstancePublicIP}:8000/query\"\n  tableName: Credentials-Table-${self:custom.region}\n\nplugins:\n  - serverless-python-requirements\n",
    "command": [
      "deploy"
    ],
    "options": {
      "param": [
        "dataBucketName=pwnd-s3-bucket-creator-prod-pwndrawdatabucket-vysphgm2oxcn",
        "codeBucketName=pwnd-s3-bucket-creator-prod-pwndec2codebucket-irxvs9luvtna"
      ]
    },
    "error": null,
    "params": {
      "dataBucketName": "pwnd-s3-bucket-creator-prod-pwndrawdatabucket-vysphgm2oxcn",
      "codeBucketName": "pwnd-s3-bucket-creator-prod-pwndec2codebucket-irxvs9luvtna"
    },
    "machineId": "27b38b587735dafe7934ebf3ae39eb7a",
    "stage": "prod",
    "accessKeyV2": "<REDACTED>",
    "accessKeyV1": "<REDACTED>",
    "orgId": "df0b1ac6-43be-4ddb-beb4-17520ad56def",
    "orgName": "jacob223",
    "userId": "dzb0yyN6gmPsgS7v00",
    "dashboard": {
      "isEnabledForService": false,
      "requiredAuthentication": false,
      "orgFeaturesInUse": null,
      "orgObservabilityIntegrations": null,
      "serviceAppId": null,
      "serviceProvider": null,
      "instanceParameters": null
    },
    "userName": "jacob223",
    "subscription": null,
    "userEmail": "jacobgrimm@ymail.com",
    "serviceProviderAwsRegion": "us-east-2",
    "serviceProviderAwsCredentials": "<REDACTED>",
    "serviceProviderAwsAccountId": "904233123757",
    "projectType": "traditional",
    "versionSf": "4.4.13",
    "serviceProviderAwsCfStackName": "Pwnd-Backend-prod",
    "integrations": {},
    "serviceUniqueId": "arn:aws:cloudformation:us-east-2:904233123757:stack/Pwnd-Backend-prod/3a04a7c0-b148-11ef-b222-027a4a31481f",
    "serviceProviderAwsCfStackId": "arn:aws:cloudformation:us-east-2:904233123757:stack/Pwnd-Backend-prod/3a04a7c0-b148-11ef-b222-027a4a31481f",
    "serviceProviderAwsCfStackCreated": "2024-12-03T07:28:44.240Z",
    "serviceProviderAwsCfStackUpdated": "2024-12-03T08:15:27.041Z",
    "serviceProviderAwsCfStackStatus": "UPDATE_COMPLETE",
    "serviceProviderAwsCfStackOutputs": [
      {
        "OutputKey": "ProxyLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:us-east-2:904233123757:function:Pwnd-Backend-prod-proxy:1",
        "Description": "Current Lambda function version",
        "ExportName": "sls-Pwnd-Backend-prod-ProxyLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "IngestUnderscoredataLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:us-east-2:904233123757:function:Pwnd-Backend-prod-ingest_data:1",
        "Description": "Current Lambda function version",
        "ExportName": "sls-Pwnd-Backend-prod-IngestUnderscoredataLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "ServiceEndpoint",
        "OutputValue": "https://yra6pqoo39.execute-api.us-east-2.amazonaws.com/prod",
        "Description": "URL of the service endpoint",
        "ExportName": "sls-Pwnd-Backend-prod-ServiceEndpoint"
      },
      {
        "OutputKey": "ServerlessDeploymentBucketName",
        "OutputValue": "serverless-framework-deployments-us-east-2-892f4b5c-f3a5",
        "ExportName": "sls-Pwnd-Backend-prod-ServerlessDeploymentBucketName"
      }
    ]
  }
}